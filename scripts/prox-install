#!/bin/bash

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[0;1;38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__error=$red
c__warning=$orange
c__cancel=$yellow
c__success=$green


## VARIABLES - TO BE CONFIGURED
proxmox=false
init_users=false
init_iptables=false
init_iptables_vm=false
init_ssh=false
ssh_port=""
network_host=""
bastion_ip=""
groups_str=""
ssh_allowed_users=""
ssh_allowed_groups=""
ssh_denied_users=""
ssh_denied_groups=""
. ./prox.conf
## - VARIABLES

## PARAMETERS
commandPath=$0
commandName=`basename "$commandPath"`
pwd=$(pwd)
actualpwd=$(pwd)
## - PARAMETERS

LoadConfig(){
	local display=$1
	. ./prox.conf

	if [ $proxmox == false ] && [ $init_iptables == false ] && [ $init_users == false ] && [ $init_ssh == false ]; then
		printf "${orange}No action requested. In ${whiitebold}prox.conf${orange}, enable at least one ${whiitebold}init_*${orange} parameter${nocolor}\n"
		exit 1
	else
		printf "${c__success}Configuration loaded${nocolor}\n"
	fi
	if [[ $display == true ]]; then
		DisplayConfig
	fi
	printf "\n"
}
DisplayConfig() {
	printf "${c__fctName}GLOBAL${nocolor}\n"
	printf "${c__fctAction}proxmox${nocolor}: ${c__value}$proxmox${nocolor}\n"

	printf "${c__fctAction}init iptables${nocolor}: ${c__value}$init_iptables${nocolor}\n"
	printf "${c__fctAction}init ssh${nocolor}: ${c__value}$init_ssh${nocolor}\n"

	printf "${c__fctName}USERS${nocolor}\n"
	printf "${c__fctAction}init users${nocolor}: ${c__value}$init_users${nocolor}\n"
	printf "${c__fctAction}groups string${nocolor}: ${c__value}$groups_str${nocolor}\n"

	printf "${c__fctName}NETWORK${nocolor}\n"
	printf "${c__fctAction}init iptables${nocolor}: ${c__value}$init_iptables${nocolor}\n"
	printf "${c__fctAction}Network host${nocolor}: ${c__value}$network_host${nocolor}\n"
	printf "${c__fctAction}Bastion IP${nocolor}: ${c__value}$bastion_ip${nocolor}\n"

	printf "${c__fctName}SSH${nocolor}\n"
	printf "${c__fctAction}init SSH${nocolor}: ${c__value}$init_ssh${nocolor}\n"
	printf "${c__fctAction}SSH Port${nocolor}: ${c__value}$ssh_port${nocolor}\n"
	printf "${c__fctAction}Allow users${nocolor}: ${c__value}$ssh_allowed_users${nocolor}\n"
	printf "${c__fctAction}Allow groups${nocolor}: ${c__value}$ssh_allowed_groups${nocolor}\n"
	printf "${c__fctAction}Denied users${nocolor}: ${c__value}$ssh_denied_users${nocolor}\n"
	printf "${c__fctAction}Denied groups${nocolor}: ${c__value}$ssh_denied_groups${nocolor}\n"
}

PVEentreprise() {
	printf "${c__fctName}Deactivating enterprise messages ...${nocolor}\n"

	mv /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources.list.d/pve-enterprise.list.disabled &&
	mv /etc/apt/sources.list.d/ceph.list /etc/apt/sources.list.d/ceph.list.disabled

	echo '# Proxmox community package repository' >> /etc/apt/sources.list
	echo 'deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription' >> /etc/apt/sources.list

	printf "${c__success}Enterprise messages deactivated${nocolor}\n"
}

UpdateSystem() {
	apt update
	apt upgrade
	apt dist-upgrade

	apt install htop gzip
}

InitUsers() {
	printf "${c__fctName}Users initialization${nocolor}"
	if [ $init_users == true ]; then
		printf "\n"
		bash init-users --create -g $groups_str
		if [ $? -eq 1 ]; then
			printf "${c__error}user ${whiitebold}$user${c__error} not exist${nocolor}\n"
			return 1
		fi
		return 0
	else
		printf " ${c__cancel}pass${nocolor}\n"
		return 0
	fi
}

InitSSH() {
	printf "${c__fctName}SSH initialization${nocolor}"
	if [ $init_ssh == true ]; then
		printf "\n"
		bash init-ssh -p $ssh_port -n $network_host -u $ssh_allowed_users -g $ssh_allowed_groups -U $ssh_denied_users -G $ssh_denied_groups --silent
		if [ $? -eq 0 ]; then
			systemctl restart ssh
			if [ $? -eq 0 ]; then
				printf "${c__success}SSH initialization end.${nocolor}\n"
			else
				printf "${c__warning}SSH restart failed${nocolor}\n"
			fi
			return 0
		else
			printf "${c__error}user ${whiitebold}$user${c__error} not exist${nocolor}\n"
			return 1
		fi
		printf "\n"
	else
		printf " ${c__cancel}pass${nocolor}\n"
		printf "\n"
		return 0
	fi
}

InitIptables() {
	printf "${c__fctName}iptables initialization${nocolor}"
	if [ $init_iptables == true ]; then
		printf "\n"
		bash init-iptables $ssh_port $network_host
		if [ $? -eq 1 ]; then
			printf "${c__error}iptables initialization failed${nocolor}\n"
			return 1
		fi

		printf "${c__fctName}iptables init for VMs${nocolor}"
		if [ $init_iptables_vm == true ]; then
			printf "\n"
			bash init-iptables-vm $ssh_port $network_host $bastion
			if [ $? -eq 1 ]; then
				printf "${c__error}iptables init for VMs failed${nocolor}\n"
				return 1
			fi
			printf "${c__success}iptables init for VMs end.${nocolor}\n"
		else
			printf " ${c__cancel}pass${nocolor}\n"
		fi

		printf "${c__success}iptables initialization end.${nocolor}\n"
	else
		printf " ${c__cancel}pass${nocolor}\n"
	fi
	printf "\n"
	return 0
}


Main(){
	## > DISABLE ENTERPRISE MESSAGES
	if [[ $proxmox == true ]]; then
		PVEentreprise
	fi
	printf "\n"
	## < DISABLE ENTERPRISE MESSAGES

	## > UPDATE SYSTEM
	# UpdateSystem
	## < UDPATE SYSTEM

	## > USERS INITIALIZATION
	InitUsers
	if [ $? -eq 1 ]; then
		# printf "${c__error}Users initialization failed${nocolor}\n"
		return 1
	fi
	printf "\n"
	## < USERS INITIALIZATION

	## > SSH CONFIG
	InitSSH
	if [ $? -eq 1 ]; then
		# printf "${c__error}SSH initialization failed${nocolor}\n"
		return 1
	fi
	## < SSH CONFIG

	## > IPTABLES CONFIG
	InitIptables
	if [ $? -eq 1 ]; then
		# printf "${c__error}Iptables initialization failed${nocolor}\n"
		return 1
	fi
	## < IPTABLES CONFIG
}

StartText () {
clear
printf "${blue}$commandName script ${nocolor}

${whiitebold}This script is made to configure a fresh Proxmox server installation
Create users and groups, protect with SSH and IPTABLES
Follow the next steps to configure it !${nocolor}
${yellow}TODO: implements fail2ban security${nocolor}
\n"
}
HowToUse() {
printf "❓ ${blue}How to use${gray}

${commandName} --ssh-port 2222 --network-host 192.168.0.1/24 --bastion 192.168.0.1 --users-groups group1:username1,username2/group2:username3,username4,username5 --ssh-allow-users username1,sshuser@ip:port --ssh-allow-groups group1,group2 --ssh-deny-users username3,sshuser@ip:port --ssh-deny-groups group4${nocolor}

${whiitebold}Parameters :${gray}
    --use-proxmox        : Use flag to deactivate enterprise messages
    --use-vm             : Use flag to active iptables config for VMs
    
    --ssh-port           : SSH port
    --network-host       : Network host
    --bastion            : Bastion IP
    
    --users-groups       : Groups string for creating users and groups
    
    --ssh-allow-users  : Allowed users to connect through SSH
    --ssh-allow-groups : Allowed groups to connect through SSH
    --ssh-deny-users   : Denied users to connect through SSH
    --ssh-deny-groups  : Denied groups to connect through SSH
    
    -h  --help           : show this message
${nocolor}\n"
}

## -----------------------------------------------------------------------
# CheckIfRoot
StartText
# Récupération des paramètres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
	--vm)
	  shift
	  init_iptables_vm=true
	  ;;
	--proxmox)
	  shift
	  proxmox=true
	  ;;
    --ssh-port)
      shift
      ssh_port=$1
      ;;
    --network-host)
      shift
      network_host=$1
      ;;
	--bastion)
	  shift
	  bastion_ip=$1
	  ;;
    --users-groups)
	  shift
	  groups_str=$1
	  ;;
	--ssh-allow-users)
      shift
      ssh_allowed_users=$1
      ;;
    --ssh-allow-groups)
      shift
      ssh_allowed_groups=$1
      ;;
    --ssh-deny-users)
      shift
      ssh_denied_users=$1
      ;;
    --ssh-deny-groups)
      shift
      ssh_denied_groups=$1
      ;;
    -h | --help)
	HowToUse
	exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done

LoadConfig true
Main
if [ $? -eq 1 ]; then
	printf "${c__error}Script failed${nocolor}\n"
	exit 1
else
	printf "${c__success}Script end${nocolor}\n"
	exit 0
fi