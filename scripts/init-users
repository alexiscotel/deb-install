#!/bin/bash

# if [ "$EUID" -ne 0 ]; then
# 	printf "${red}Please run this script as root.${nocolor}\n"
# 	g_errors+=("Run this script as root")
# 	exit 1
# fi

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[0;3;38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__value2=$purple
c__error=$red
c__warning=$orange
c__success=$green


## VARIABLES
repSkell="files/etc/skel"
pwd=$(pwd)
actualpwd=$(pwd)
g_errors=()

###############
## PARAMETERS
###############
commandPath=$0
commandName=`basename "$commandPath"`
create=false
delete=false
groupstring=""
silent=false
verbose=false

##############
## FUNCTIONS
##############

CheckIfParameters() {
	if [ $create == false ] && [ $delete == false ] && [ -z "$groupstring" ] && [ $silent == false ]; then
		return 1
	else
		return 0
	fi
}
CheckMandatoryParams() {
	if [ -z "$groupstring" ]; then
		printf "${c__error}parameter ${c__msgVar}-g | --groups${c__error} is mandatory.${nocolor}\n"
		return 1
	fi
}

ManageSkelFiles() {
	printf "${c__fctName}Load skel files${nocolor}\n"

	find "$repSkell" -type f | while read -r file; do
		local filename=$(basename "$file")
		
		printf "  ${c__fctAction}/etc/skel/${c__msgVar}${filename}"
		if [ -f "/etc/skel/$filename" ]; then
			printf "${c__fctAction} ...${nocolor}"

			mv "/etc/skel/$filename" "/etc/skel/$filename.bak" > /dev/null 2>&1
			local result=$?
			if [ $result -eq 0 ]; then
				printf "${c__success} saved${nocolor}"
			else
				printf "${c__error} save failed${nocolor}"
				g_errors+=("renamed failed")
			fi
		else
			printf "\n   ${yellow}not found ${c__fctAction}in ${c__fct2}/etc/skel${nocolor}"
		fi
		cp "files/etc/skel/$filename" "/etc/skel/$filename" > /dev/null 2>&1
		result=$?
		if [ $result -eq 0 ]; then
			printf "${c__fctAction} - ${c__success}copied${nocolor}\n"
		else
			printf "${c__fctAction} - ${c__error}copy failed${nocolor}\n"
			g_errors+=("Failed to copy /etc/skel/$filename")
		fi
	done
	
	# find "$repSkell" -type f | while read -r file; do
	# 	local filename=$(basename "$file")
	# 	if [ -f "/etc/skel/$filename" ]; then
	# 		printf "  ${c__fctAction}Copying  ${c__msgVar}${filename} ${c__fctAction}...${nocolor}"
	# 		cp "/etc/skel/$filename" "/etc/skel/$filename" # > /dev/null 2>&1
	# 		local result=$?
	# 		if [ $result -eq 0 ]; then
	# 			printf "${c__success} done${nocolor}\n"
	# 		else
	# 			printf "${c__error} failed${nocolor}\n"
	# 			g_errors+=("Failed to copy /etc/skel/$filename")
	# 		fi
	# 	else
	# 		printf "  ${c__fctAction}File ${c__msgVar}${filename} ${c__warning}not found${nocolor}\n"
	# 	fi
	# done
}

CheckIfUserExists() {
	local user=$1
	# printf "${c__fctAction}Checking user ${c__msgVar}${user}${c__fctAction} ...${nocolor}\n"
	printf "   ${c__fctAction}${c__msgVar}${user}${c__fctAction} ...${nocolor}"
	getent passwd $user > /dev/null 2>&1
	local result=$?
	if [ $result -eq 0 ]; then
		printf "${c__success} found${nocolor}\n"
		return 0
	else
		printf "${c__warning} not found${nocolor}\n"
		return 1
	fi
}
CheckIfGroupExists() {
	local group=$1
	# printf "${c__fctAction}Checking group ${c__msgVar}${group}${c__fctAction} ...${nocolor}"
	printf "  ${c__fctAction}${c__msgVar}${group}${c__fctAction} ...${nocolor}"
	getent group $group > /dev/null 2>&1
	local result=$?
	if [ $result -eq 0 ]; then
		printf "${c__success} found${nocolor}\n"
		return 0
	else
		printf "${c__warning} not found${nocolor}\n"
		return 1
	fi
}





Main() {
	printf "${c__fctName}Start login creation ...${nocolor}\n"

	local cptGroupsCreated=0
	local cptUsersCreated=0

	IFS=';' read -r -a groups <<< "${groupstring}"

	for grp in "${groups[@]}"; do
		local groupCreated=false
		IFS='=' read -r -a a_grp <<< "${grp}"
		local groupName=${a_grp[0]}
		local users=${a_grp[1]}
		
		if [[ $silent == false ]]; then
			printf "${c__fctName}Group: ${c__value}${groupName}${nocolor}\n"
		fi


		CheckIfGroupExists $groupName
		local grpExists=$?
		if [ $grpExists -eq 1 ]; then
			if [[ $silent == false ]]; then
				printf "  ${c__fctAction}Creating ${c__value}${groupName}${c__fctAction} ...${nocolor}"
			fi
			## GROUP CREATION
			groupadd $groupName > /dev/null 2>&1
			local grpadded=$?
			if [ $grpadded -eq 0 ]; then
				if [[ $silent == false ]]; then
					printf "${c__success} done${nocolor}\n"
				fi
				groupCreated=true
				cptGroupsCreated=$((cptGroupsCreated+1))
			else
				if [[ $silent == false ]]; then
					printf "${c__error} failed${nocolor}\n"
				fi
				groupCreated=false
				g_errors+=("Group $groupName not created")
			fi
		else
			groupCreated=false
		fi

		if [[ -z "$users" ]]; then
			if [[ $verbose == true ]]; then
				printf "${c__fctAction}No users to create${nocolor}\n"
			fi
			continue
		fi
		IFS=',' read -r -a usernames <<< "${users}"

		if [[ $silent == false ]]; then
			printf "  ${c__fctName}Users: ${nocolor}"
			for usrln in "${usernames[@]}"; do
				local usrnm=$(echo "$usrln" | cut -d'/' -f1)
				printf "${c__value}${usrnm} ${nocolor}"
			done
			printf "\n"
		fi

		local l_cptUsersCreated=0
		local l_cptUsersAdded=0
		for username in "${usernames[@]}"; do
			userCreated=false
			
			CheckIfUserExists $username
			local usrExists=$?
			if [ $usrExists -eq 1 ]; then
				if [[ $silent == false ]]; then
					printf "   ${c__fctAction}creating ${c__value}${username}${c__fctAction} ...${nocolor}"
				fi

				## USER CREATION
				useradd --create-home $username -G $groupName > /dev/null 2>&1
				local usradded=$?
				if [ $usradded -eq 0 ]; then
					if [[ $silent == false ]]; then
						printf " ${c__success}done${nocolor}\n"
						l_cptUsersCreated=$((l_cptUsersCreated+1))
					fi
					userCreated=true
					usrExists=1
				else
					if [[ $silent == false ]]; then
						printf " ${c__error}failed${nocolor}\n"
					fi
					userCreated=false
					g_errors+=("User $username not created")
				fi
			else
				# Retrieve the list of groups the user belongs to
				grps=$(id -nG "$username")
				# Check if the desired group exists in the list
				if [[ "$grps" =~ (^| )"$groupName"($| ) ]]; then
					printf "   ${c__msgVar}${username} ${c__fctAction}already in ${c__msgVar}${groupName}${c__fctAction}${nocolor}\n"
				else
					printf "   ${c__fctAction}Inserting ${c__msgVar}${username} ${c__fctAction}to ${c__msgVar}${groupName}${c__fctAction} ...${nocolor}"
					# sudo usermod -aG ${groupName} ${username} > /dev/null 2>&1
					usermod -aG ${groupName} ${username}
					local usrgrp=$?
					if [ $? -eq 0 ]; then
						l_cptUsersAdded=$((l_cptUsersAdded+1))
						printf " ${c__success}done${nocolor}"
					else
						printf " ${c__error}failed${nocolor}"
						g_errors+=("User $username not added to group $groupName")
					fi
					printf "\n"
				fi
			fi

		done

		cptUsersCreated=$((cptUsersCreated+l_cptUsersCreated))

		if [ $silent == false ] && ([ $l_cptUsersCreated -gt 0 ] || [ $l_cptUsersAdded -gt 0 ]); then
			printf "${c__success}${groupName}${c__fct2}\n"
			printf "  ${c__value}${l_cptUsersCreated}${c__fct2} user(s) created\n"
			printf "  ${c__value}${l_cptUsersAdded}${c__fct2} user(s) added${nocolor}\n"
			printf "\n"
		fi
	done

	if [ $silent == false ] && ([ $cptGroupsCreated -gt 0 ] || [ $cptUsersCreated -gt 0 ]); then
		printf "${c__fctName}Summary${c__fct2}\n"
		printf "  ${c__value}${cptGroupsCreated}${c__fct2} group(s) created\n"
		printf "  ${c__value}${cptUsersCreated}${c__fct2} user(s) created${nocolor}\n"
		# if [ ${#g_errors[@]} -eq 0 ]; then
		# 	for err in "${g_errors[@]}"; do
		# 		printf "  ${c__error}‚Ä¢ ${err}${nocolor}\n"
		# 	done
		# fi
		printf "\n"
	fi
}

StartText () {
	printf "üîê ${blue}$commandName script ${nocolor}üîê
	\n"
}
HowToUse() {
	printf "‚ùì ${blue}How to use${gray}\n"
	printf "${whiitebold}This script is made to create users and groups${nocolor}\n"
	printf "\n"
	printf "${commandName} --groups \"group1=username1,sshuser@ip:port/group2=username3,username1\"${nocolor}\n"
	printf "\n"
	printf "${whiitebold}Parameters :${gray}\n"
	printf "  -g  --groups : groups to add users\n"
	printf "                 format: group1=username1,username2;group2=username3,username1\n"
	printf "  --verbose    : show logs\n"
	printf "  --silent     : hide logs\n"
	printf "\n"
	printf "  -h  --help   : show this message\n"
	printf "${nocolor}\n"
}

## -----------------------------------------------------------------------

# R√©cup√©ration des param√®tres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
	--create)
	  create=true
	  ;;
	--delete)
	  delete=true
	  ;;
    -g | --groups)
      shift
      groupstring=$1
      ;;
	--silent)
	  silent=true
	  ;;
    --verbose)
	  verbose=true
	  ;;
	-h | --help)
	HowToUse
	exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done

CheckIfParameters
if [ $? -eq 1 ]; then
	StartText
	HowToUse
	exit 1
fi

if [[ $silent == false ]]; then
	StartText
fi


CheckMandatoryParams
if [ $? -eq 1 ]; then
	# HowToUse
	exit 1
fi

ManageSkelFiles
if [[ $silent == false ]]; then
	printf "\n"
fi
Main
