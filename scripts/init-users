#!/bin/bash

# if [ "$EUID" -ne 0 ]; then
# 	printf "${red}Please run this script as root.${nocolor}\n"
# 	g_errors+=("Run this script as root")
# 	exit 1
# fi

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[0;3;38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__value2=$purple
c__error=$red
c__warning=$orange
c__notice=$yellow
c__success=$green

###############
## VARIABLES
###############
repSkellSystem="/etc/skel"
repSkell="files_to_copy/etc/skel"
pwd=$(pwd)
actualpwd=$(pwd)
g_errors=()
gentenvInvalid=false
commandPath=$0
commandName=`basename "$commandPath"`

###############
## PARAMETERS
###############
silent=false
verbose=false
usersString=""
declare -a users=()
groupsString=""
declare -a groups=()
groupedUsersString=""
declare -a groupedUsers=()
addingGroup=""

##############
## FUNCTIONS
##############

CheckIfParameters() {
	local nbParameters=$1
	# check if there is parameters
	if [ $nbParameters -eq 0 ]; then
		# printf "${c__error}No parameters provided.${nocolor}\n"
		g_errors+=("No parameters provided")
		return 1
	else
		return 0
	fi
}
CheckMandatoryParams() {
	# if [ -z "$groupstring" ]; then
	# 	printf "${c__error}parameter ${c__msgVar}-g | --groups${c__error} is mandatory.${nocolor}\n"
	# 	return 1
	# fi

	if [ ! -z "$groupedUsersString" ]; then
		if [ -z "$usersString" ] || [ -z "$groupsString" ]; then
			g_errors+="${c__error}In order to add users into groups, you must provide users and groups parameters.${nocolor}\n"
			return 1
		fi
	else
		return 0
	fi
}

ManageSkelFiles() {
	printf "${c__fctName}Load skel files${nocolor}\n"

	find "$repSkell" -type f | while read -r file; do
		local filename=$(basename "$file")
		
		printf "  ${c__fctAction}$repSkellSystem/${c__msgVar}${filename}"
		if [ -f "$repSkellSystem/$filename" ]; then
			printf "${c__fctAction} ...${nocolor}"

			mv "$repSkellSystem/$filename" "$repSkellSystem/$filename.bak" > /dev/null 2>&1
			local result=$?
			if [ $result -eq 0 ]; then
				printf "${c__success} saved${nocolor}"
			else
				printf "${c__error} save failed${nocolor}"
				g_errors+=("renamed failed")
			fi
		else
			printf "\n   ${yellow}not found ${c__fctAction}in ${c__fct2}$repSkellSystem${nocolor}"
		fi
		cp "$repSkell/$filename" "$repSkellSystem/$filename" > /dev/null 2>&1
		result=$?
		if [ $result -eq 0 ]; then
			printf "${c__fctAction} - ${c__success}copied${nocolor}\n"
		else
			printf "${c__fctAction} - ${c__error}copy failed${nocolor}\n"
			g_errors+=("Failed to copy $repSkellSystem/$filename")
		fi
	done

	printf "\n"
}


CheckIfItemExists() {
	local item=$1
	local type=$2

	if [ "$type" == 'user' ]; then
		printf "  ${c__fctAction}Checking if ${c__value}$item${c__fctAction} is a valid Linux user ...${nocolor}\n"
		if id -u "$item" >/dev/null 2>&1; then
			if [ $verbose == true ]; then
				printf "   ${c__value2}$item${c__fctAction} is a valid Linux user.${nocolor}\n"
			fi
			return 0
		else
			if [ $verbose == true ]; then
				printf "   ${c__value2}$item${c__error} is not a valid Linux user.${nocolor}\n"
			fi
			return 1
		fi
	elif [ "$type" == 'group' ]; then
		printf "  ${c__fctAction}Checking if ${c__value}$item${c__fctAction} is a valid Linux group ...${nocolor}\n"
		if ! command -v getent > /dev/null; then
			gentenvInvalid=true
			if [ $verbose == true ]; then
				printf "   ${c__error}command getenv not found${nocolor}\n"
			fi
			return 2
		else
			if [ $verbose == true ]; then
				printf "   ${c__fctAction}command getenv found${nocolor}\n"
			fi
			gentenvInvalid=false

			# Check if the string is a valid group
			if getent group "$item" > /dev/null 2>&1; then
				if [ $verbose == true ]; then
					printf "   ${c__value2}$item${c__fctAction} is a valid Linux group.${nocolor}\n"
				fi
				return 0
			else
				if [ $verbose == true ]; then
					printf "   ${c__value2}$item${c__error} is not a valid Linux group.${nocolor}\n"
				fi
				return 1
			fi
		fi
	else
		printf "${c__error}parameter ${c__msgVar}type${c__error} is mandatory.${nocolor}\n"
		errors+=("type is mandatory")
		return 1
	fi
}

##################
## MANAGE GROUPS
##################
ManageGroups() {
	IFS=',' read -r -a groups <<< "${groupsString}"

	if [[ $silent == false ]]; then
		printf "${c__fctName}Groups: ${nocolor}"
		for groupname in "${groups[@]}"; do
			# local usrnm=$(echo "$usrln" | cut -d'/' -f1)
			printf "${c__value2}${groupname} ${nocolor}"
		done
		printf "\n"
	fi


	for groupname in "${groups[@]}"; do		

		# check if grp is not empty
		if [ -z "$groupname" ]; then
			g_errors+=("Group name is empty")
			continue
		fi

		if [ $gentenvInvalid == false ]; then
			CheckIfItemExists $groupname 'group'
			local test=$?
			if [ $test -eq 1 ]; then # user does not exist
				printf "   ${c__success}Group ${whiitebold}\"${groupname}\"${c__success} does not exist${nocolor}\n"

				CreateGroup $groupname

			elif [ $test -eq 0 ]; then # user exists

				printf "   ${c__notice}Group ${whiitebold}\"${groupname}\"${c__notice} already exists${nocolor}\n"
				continue

			elif [ $test -eq 2 ]; then # command getent not found

				if [ $silent == false ]; then
					printf "   ${c__error}check for \"${groupname}\" fail${nocolor}\n"
				fi

				continue
			fi
		else
			if [ $silent == false ]; then
				printf "   ${c__notice}check skip for ${whiitebold}\"${groupname}\"${nocolor}\n"
			fi
		fi

	done

	printf "\n"
}

CreateGroup() {
	local groupName=$1	

	# check if groupName is not empty
	if [ -z "$groupName" ]; then
		printf " ${c__error}Group name is empty${nocolor}\n"
		g_errors+=("Group name is empty")
		return 1
	fi

	if [[ $silent == false ]]; then
		printf " ${c__fctAction}Creating ${c__value}${groupName}${c__fctAction} ...${nocolor}"
	fi

	groupadd $groupName > /dev/null 2>&1
	local grpadded=$?
	if [ $grpadded -eq 0 ]; then
		if [[ $silent == false ]]; then
			printf "${c__success} done${nocolor}\n"
		fi
	else
		if [[ $silent == false ]]; then
			printf "${c__error} failed${nocolor}\n"
		fi
	fi
}

#################
## MANAGE USERS
#################
ManageUsers() {
	IFS=',' read -r -a users <<< "${usersString}"

	if [[ $silent == false ]]; then
		printf "${c__fctName}Users: ${nocolor}"
		for username in "${users[@]}"; do
			# local usrnm=$(echo "$usrln" | cut -d'/' -f1)
			printf "${c__value2}${username} ${nocolor}"
		done
		printf "\n"
	fi


	for username in "${users[@]}"; do		

		# check if usr is not empty
		if [ -z "$username" ]; then
			g_errors+=("User name is empty")
			continue
		fi


		if [ $gentenvInvalid == false ]; then
			CheckIfItemExists $username 'user'
			local test=$?
			if [ $test -eq 1 ]; then # user does not exist
				printf "   ${c__success}User ${whiitebold}\"${username}\"${c__success} does not exist${nocolor}\n"

				CreateUser $username

			elif [ $test -eq 0 ]; then # user exists

				printf "   ${c__notice}User ${whiitebold}\"${username}\"${c__notice} already exists${nocolor}\n"
				continue

			elif [ $test -eq 2 ]; then # command getent not found

				if [ $silent == false ]; then
					printf "   ${c__error}check for \"${username}\" fail${nocolor}\n"
				fi

				continue
			fi
		else
			if [ $silent == false ]; then
				printf "   ${c__notice}check skip for ${whiitebold}\"${username}\"${nocolor}\n"
			fi
		fi


	done

	printf "\n"
}

CheckIfUserInGroup() {
	local user=$1
	# local userFound=1
	addingGroup=""

	IFS=';' read -r -a groupedUsers <<< "${groupedUsersString}"
	for groupedUser in "${groupedUsers[@]}"; do

		IFS='=' read -r -a tmp <<< "${groupedUser}"
		local groupName=${tmp[0]}
		local grpusrs=(${tmp[1]})

		IFS=',' read -r -a usrs <<< "${grpusrs}"

		for grpusr in "${usrs[@]}"; do

			if [ "$grpusr" == "$user" ]; then
				# userFound=0
				addingGroup="$groupName"
				break
			fi
		done
	done
	# special variable 
	REPLY="$addingGroup"
}

CreateUser() {
	local usrname=$1	

	# check if usrname is not empty
	if [ -z "$usrname" ]; then
		printf " ${c__error}User name is empty${nocolor}\n"
		g_errors+=("User name is empty")
		return 1
	fi

	if [[ $silent == false ]]; then
		printf " ${c__fctAction}Creating ${c__value}${usrname}${c__fctAction} ...${nocolor}"
	fi

	addCmd="useradd --create-home $usrname"

	CheckIfUserInGroup $usrname
	# if group found, create useradd command with -G flag
	if [ ! -z "$REPLY" ]; then
		printf " ${c__notice}adding to group ${whiitebold}\"${REPLY}\"${nocolor}"
		addCmd+=" -G $REPLY"
	fi

	eval "$addCmd"
	local usradded=$?
	if [ $usradded -eq 0 ]; then
		if [[ $silent == false ]]; then
			printf " ${c__success}done${nocolor}\n"
			l_cptUsersCreated=$((l_cptUsersCreated+1))
		fi
		userCreated=true
		usrExists=1
	else
		if [[ $silent == false ]]; then
			printf " ${c__error}failed${nocolor}\n"
		fi
		userCreated=false
		g_errors+=("User $username not created")
	fi


	
	# ## USER CREATION
	# useradd --create-home $usrname -G $groupName > /dev/null 2>&1
	# local usradded=$?
	# if [ $usradded -eq 0 ]; then
	# 	if [[ $silent == false ]]; then
	# 		printf " ${c__success}done${nocolor}\n"
	# 		l_cptUsersCreated=$((l_cptUsersCreated+1))
	# 	fi
	# 	userCreated=true
	# 	usrExists=1
	# else
	# 	if [[ $silent == false ]]; then
	# 		printf " ${c__error}failed${nocolor}\n"
	# 	fi
	# 	userCreated=false
	# 	g_errors+=("User $username not created")
	# fi
}




StartText () {
	printf "${blue}$commandName script ${nocolor}
	\n"
}
HowToUse() {
	printf "‚ùì ${blue}How to use${gray}\n"
	printf "${whiitebold}This script is made to create users and groups${nocolor}\n"
	printf "\n"
	printf "${commandName} -u \"username1,username2,username3,username4\" -g \"group1,group2\" --add \"group1=username1,usernam2;group2=username3\"${nocolor}\n"
	printf "\n"
	printf "${whiitebold}Parameters :${gray}\n"
	printf "  -u  --users  : users to create (separated by a comma) \n"
	printf "  -g  --groups : groups to create (separated by a comma)\n"
	printf "  -a  --add    : formated string to set users in groups\n"
	printf "                 format: group1=username1,username2;group2=username3,username1\n"
	printf "  --verbose    : show logs\n"
	printf "  --silent     : hide logs\n"
	printf "\n"
	printf "  -h  --help   : show this message\n"
	printf "${nocolor}\n"
}
EndOfScript() {
	printf "\n"

	# show error messages if there are
	if [[ ${#g_errors[@]} -gt 0 ]]; then
		printf "${red}‚ùå ${#g_errors[@]} error(s)${nocolor}\n"
		for err in "${g_errors[@]}"; do
			printf "  ${red}- ${err}${nocolor}\n"
		done
	else
		printf "${green}‚úÖ No error${nocolor}\n"
	fi

	printf "üëã ${blue}Bye bye${nocolor} üëã\n"
	printf "\n"
}


Main() {
	printf "${c__fctName}Start login creation ...${nocolor}\n"

	local cptGroupsCreated=0
	local cptUsersCreated=0

	IFS=';' read -r -a groups <<< "${groupstring}"

	for grp in "${groups[@]}"; do
		local groupCreated=false
		IFS='=' read -r -a a_grp <<< "${grp}"
		local groupName=${a_grp[0]}
		local users=${a_grp[1]}
		
		if [[ $silent == false ]]; then
			printf "${c__fctName}Group: ${c__value}${groupName}${nocolor}\n"
		fi


		CheckIfGroupExists $groupName
		local grpExists=$?
		if [ $grpExists -eq 1 ]; then
			if [[ $silent == false ]]; then
				printf "  ${c__fctAction}Creating ${c__value}${groupName}${c__fctAction} ...${nocolor}"
			fi
			## GROUP CREATION
			groupadd $groupName > /dev/null 2>&1
			local grpadded=$?
			if [ $grpadded -eq 0 ]; then
				if [[ $silent == false ]]; then
					printf "${c__success} done${nocolor}\n"
				fi
				groupCreated=true
				cptGroupsCreated=$((cptGroupsCreated+1))
			else
				if [[ $silent == false ]]; then
					printf "${c__error} failed${nocolor}\n"
				fi
				groupCreated=false
				g_errors+=("Group $groupName not created")
			fi
		else
			groupCreated=false
		fi

		if [[ -z "$users" ]]; then
			if [[ $verbose == true ]]; then
				printf "${c__fctAction}No users to create${nocolor}\n"
			fi
			continue
		fi
		IFS=',' read -r -a usernames <<< "${users}"

		if [[ $silent == false ]]; then
			printf "  ${c__fctName}Users: ${nocolor}"
			for usrln in "${usernames[@]}"; do
				local usrnm=$(echo "$usrln" | cut -d'/' -f1)
				printf "${c__value}${usrnm} ${nocolor}"
			done
			printf "\n"
		fi

		local l_cptUsersCreated=0
		local l_cptUsersAdded=0
		for username in "${usernames[@]}"; do
			userCreated=false
			
			CheckIfUserExists $username
			local usrExists=$?
			if [ $usrExists -eq 1 ]; then
				if [[ $silent == false ]]; then
					printf "   ${c__fctAction}creating ${c__value}${username}${c__fctAction} ...${nocolor}"
				fi

				## USER CREATION
				useradd --create-home $username -G $groupName > /dev/null 2>&1
				local usradded=$?
				if [ $usradded -eq 0 ]; then
					if [[ $silent == false ]]; then
						printf " ${c__success}done${nocolor}\n"
						l_cptUsersCreated=$((l_cptUsersCreated+1))
					fi
					userCreated=true
					usrExists=1
				else
					if [[ $silent == false ]]; then
						printf " ${c__error}failed${nocolor}\n"
					fi
					userCreated=false
					g_errors+=("User $username not created")
				fi
			else
				# Retrieve the list of groups the user belongs to
				grps=$(id -nG "$username")
				# Check if the desired group exists in the list
				if [[ "$grps" =~ (^| )"$groupName"($| ) ]]; then
					printf "   ${c__msgVar}${username} ${c__fctAction}already in ${c__msgVar}${groupName}${c__fctAction}${nocolor}\n"
				else
					printf "   ${c__fctAction}Inserting ${c__msgVar}${username} ${c__fctAction}to ${c__msgVar}${groupName}${c__fctAction} ...${nocolor}"
					# sudo usermod -aG ${groupName} ${username} > /dev/null 2>&1
					usermod -aG ${groupName} ${username}
					local usrgrp=$?
					if [ $? -eq 0 ]; then
						l_cptUsersAdded=$((l_cptUsersAdded+1))
						printf " ${c__success}done${nocolor}"
					else
						printf " ${c__error}failed${nocolor}"
						g_errors+=("User $username not added to group $groupName")
					fi
					printf "\n"
				fi
			fi

		done

		cptUsersCreated=$((cptUsersCreated+l_cptUsersCreated))

		if [ $silent == false ] && ([ $l_cptUsersCreated -gt 0 ] || [ $l_cptUsersAdded -gt 0 ]); then
			printf "${c__success}${groupName}${c__fct2}\n"
			printf "  ${c__value}${l_cptUsersCreated}${c__fct2} user(s) created\n"
			printf "  ${c__value}${l_cptUsersAdded}${c__fct2} user(s) added${nocolor}\n"
			printf "\n"
		fi
	done

	if [ $silent == false ] && ([ $cptGroupsCreated -gt 0 ] || [ $cptUsersCreated -gt 0 ]); then
		printf "${c__fctName}Summary${c__fct2}\n"
		printf "  ${c__value}${cptGroupsCreated}${c__fct2} group(s) created\n"
		printf "  ${c__value}${cptUsersCreated}${c__fct2} user(s) created${nocolor}\n"
		# if [ ${#g_errors[@]} -eq 0 ]; then
		# 	for err in "${g_errors[@]}"; do
		# 		printf "  ${c__error}‚Ä¢ ${err}${nocolor}\n"
		# 	done
		# fi
		printf "\n"
	fi
}


## -----------------------------------------------------------------------

CheckIfParameters $#
if [ $? -eq 1 ]; then
	StartText
	HowToUse
	exit 1
fi

# R√©cup√©ration des param√®tres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
	-u | --users)
	  shift
	  usersString=$1
	  ;;
	-g | --groups)
      shift
      groupsString=$1
      ;;
	-a | --add)
	  shift
	  groupedUsersString=$1
	  ;;
	--silent)
	  silent=true
	  ;;
    --verbose)
	  verbose=true
	  ;;
	-h | --help)
	HowToUse
	exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done



if [[ $silent == false ]]; then
	StartText
fi


CheckMandatoryParams
if [ $? -eq 1 ]; then
	# HowToUse
	exit 1
fi


ManageSkelFiles
# printf "\n"
ManageGroups
# printf "\n"
ManageUsers


EndOfScript
