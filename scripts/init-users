#!/bin/bash

# create a script to add users to groups
# add-user-to-group group1:username1,username2,group2:username3,username4

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[0;3;38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__error=$red
c__warning=$orange
c__success=$green


## VARIABLES
pwd=$(pwd)
actualpwd=$(pwd)

errors=()

###############
## PARAMETERS
###############
commandPath=$0
commandName=`basename "$commandPath"`
groupstring=
silent=false

##############
## FUNCTIONS
##############
GenerateErrorLogs() {
	local file=$1
	
	if [ ! -f $file ]; then
		touch $file
	fi

	if [ ${#errors[@]} -gt 0 ]; then
		printf "%s\n" "${errors[@]}" > $file
	fi
}


CheckMandatoryParams() {
	if [ -z "$groupstring" ]; then
		printf "${c__error}parameter ${c__msgVar}-g | --groups${c__error} is mandatory.${nocolor}\n"
		return 1
	fi
}

CheckIfUserExists() {
	local user=$1
	printf "${c__fctName}Checking user $user ...${nocolor}\n"
	getent passwd $user > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		printf "${c__success}user ${whiitebold}$user${c__success} exist${nocolor}\n"
		return 0
	else
		printf "${c__warning}user ${whiitebold}$user${c__warning} not exist${nocolor}\n"
		return 1
	fi
}
CheckIfGroupExists() {
	local group=$1
	printf "${c__fctName}Checking group $group ...${nocolor}\n"
	getent group $group > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		printf "${c__success}group ${whiitebold}$group${c__success} exist${nocolor}\n"
		return 0
	else
		printf "${c__warning}group ${whiitebold}$group${c__warning} not exist${nocolor}\n"
		return 1
	fi
}



Main() {
	IFS='/' read -r -a groups <<< "${groupstring}"
	
	for grp in "${groups[@]}"; do
		local groupCreated=false
		local groupName=$(echo "$grp" | cut -d':' -f1)
		local users=$(echo "$grp" | cut -d':' -f2)
		IFS=',' read -r -a usernames <<< "${users}"

		printf "${c__fctName}Group: ${c__value}${groupName}${nocolor}\n"

		## GROUP CREATION
		CheckIfGroupExists $groupName
		if [ $? -eq 1 ]; then
			printf "${c__fctAction}Creating group ${c__msgVar}${groupName}${c__fctAction} ... ${nocolor}"
			addgroup $groupName > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				printf "${c__success}added${nocolor}\n"
				groupCreated=true
			else
				printf "${c__error}failed${nocolor}\n"
				groupCreated=false
				errors+=("Group $groupName not created")
			fi
		fi

		printf "\n${c__fctName}Users: ${c__value}${usernames[*]}${nocolor}\n"
		# ## FOR each USERNAMES
		for usrname in "${usernames[@]}"; do
			local userCreated=false
			
			## USER CREATION
			CheckIfUserExists $usrname
			if [ $? -eq 1 ]; then
				printf "${c__fctAction}Creating user ${c__msgVar}${usrname}${c__fctAction} ... ${nocolor}"
				adduser $usrname > /dev/null 2>&1
				if [ $? -eq 0 ]; then
					printf "${c__success}added${nocolor}\n"
					userCreated=true
				else
					printf "${c__error}failed${nocolor}\n"
					userCreated=false
					errors+=("User $usrname not created")
				fi
			else
				userCreated=false
			fi

			## ADD USER to GROUP
			if [ $userCreated != true ]; then
				continue;
			else
				printf "${c__fctAction}Inserting user ${c__msgVar}${usrname}${c__fctAction} to group ${c__msgVar}${groupName}${c__fctAction} ... ${nocolor}"
				sudo usermod -aG ${groupName} ${usrname} > /dev/null 2>&1
				if [ $? -eq 0 ]; then
					printf "${c__success}added${nocolor}\n"
					# return 0
				else
					printf "${c__error}failed${nocolor}\n"
					errors+=("User $usrname not added to group $groupName")
					# return 1
				fi
			fi

		done
	done
}

StartText () {
printf "üîê ${blue}$commandName script ${nocolor}üîê

${whiitebold}This script is made to create users and groups${nocolor}
\n"
}
HowToUse() {
printf "‚ùì ${blue}How to use${gray}

${commandName} --create -g group1:username1,sshuser@ip:port/group2:username3,username4${nocolor}

${whiitebold}Parameters :${gray}
	--create             : Flag to for creation
	--delete             : Flag to delete
    -g  --groups : Allowed groups to connect through SSH
				(format: --allowed-groups group1:username1,username2/group2:username3,username4)
    -h  --help          : show this message
${nocolor}\n"
}

## -----------------------------------------------------------------------
if [[ silent = false ]]; then
	StartText
fi
# R√©cup√©ration des param√®tres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
	--create)
	  create=true
	  ;;
	--delete)
	  delete=true
	  ;;
    -g | --groups)
      shift
      groupstring=$1
      ;;
	--silent)
	  silent=true
	  ;;
    -h | --help)
	HowToUse
	exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done

CheckMandatoryParams
if [ $? -eq 1 ]; then
	# HowToUse
	exit 1
fi

Main

GenerateErrorLogs $actualpwd/logs/init-users-error.log
