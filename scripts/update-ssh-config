#!/bin/bash

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
c__fctName='\033[0;38;5;45m'
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$green
c__error=$red
c__success=$green

################
## PARAMETERS ##
################
commandPath=$0
commandName=`basename "$commandPath"`
# ARG_FILE="../files/etc/ssh/sshd_config"
ARG_FILE=
ARG_KEY=
ARG_VALUE=
ARG_REPLACE=false


##############
## VARIABLES 
##############
sshd_path="/usr/sbin/sshd"
runningAsRoot=false
sshdExists=false
syntaxStatus='invalid'
replace=false
verbose=false
silent=false



###############
## FUNCTIONS ##
###############
CheckIfParameters() {
	if [ -z "$ARG_FILE" ] && [ -z "$ARG_KEY" ] && [ -z "$ARG_VALUE" ]; then
		return 1
	else
		return 0
	fi
}

CheckMandatoryParams() {
	local isError=false

	if [[ $verbose = true ]]; then
		printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	fi

	if [[ -z $ARG_FILE ]]; then
		# printf "${c__error}ssh config file is mandatory.${nocolor}\n"
		printf "${c__error}parameter ${c__msgVar}-f | --file${c__error} is mandatory.${nocolor}\n"
		exit 1
	else
		
		if [[ $verbose = true ]]; then
			printf "${c__fct2}file : ${c__value}${ARG_FILE}${nocolor}\n"
		fi
	fi

	if [[ -z $ARG_KEY ]]; then
		printf "${c__error}parameter ${c__msgVar}-k | --key${c__error} is mandatory.${nocolor}\n"
		isError=true
	else

		if [[ $verbose = true ]]; then
			printf "${c__fct2}key : ${c__value}${ARG_KEY}${nocolor}\n"
		fi
	fi


	if [[ -z $ARG_VALUE ]]; then
		printf "${c__error}parameter ${c__msgVar}-v | --value${c__error} is mandatory.${nocolor}\n"
		isError=true
	else
		
		if [[ $verbose = true ]]; then
			printf "${c__fct2}value : ${c__value}${ARG_VALUE}${nocolor}\n"
		fi
	fi

	if [[ $isError = true ]]; then
		exit 1
	fi
}


# Function to validate the syntax of a configuration key
validate_key_syntax() {
    local key=$1
    local value=$2
	syntaxStatus='invalid'
    # Use sshd to check if the syntax is valid
    # $sshd_path -t -f /dev/null -o "${key} ${value}" 2>&1
	# $sshd_path -t -F "$ARG_FILE" -fN
	if [ "$runningAsRoot" = true ] && [ "$sshdExists" = true ]; then
		printf "${orange}"
		$sshd_path -f "$ARG_FILE" -o "${key} ${value}" 2>&1
		local result=$?
		# Check the return code of the sshd command
		if [ $result -eq 0 ]; then
			# printf "${green}Updated${nocolor}\n"
			syntaxStatus='valid'
			return 0
		else
			printf "${red}command failed.${nocolor}\n"
			syntaxStatus='invalid'
			return 1
		fi
	else
		printf "${orange}Cannot validate syntax. ${sshd_path} not found.${nocolor}\n"
		syntaxStatus='unknown'
		return 2
	fi
}

# Function to update a specific configuration value
update_sshd_config() {
    local key=$1
    local value=$2
	local file=$3

	# # transform the comma in value by a space
	value=${value//,/ }

	# check is need to append or replace
	if [[ "$ARG_REPLACE" == false ]]; then
		local currentval=$(grep -E "^${key}" "$file")
		currentval=${currentval//$key/}
		# # Supprimer les espaces de début de chaîne
		currentval=${currentval#"${currentval%%[![:space:]]*}"}
		currentval=${currentval%%[[:space:]]*}

		echo "|$currentval|"
		if [ -n "$currentval" ]; then
			value=$(echo "${value} ${currentval}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
		fi	
	fi

	# Use sed to find and replace the configuration line, even if it's commented out
	sed -i "s/^#\?\s*${key}\s*.*/${key} ${value}/" "$ARG_FILE"
	sedResult=$?

	# Check if the sed command was successful
	if [ $sedResult -eq 0 ]; then

		# Check if the sed command added a new line
		if ! grep -q "${key} ${value}" "$file"; then
			printf "${gray}Key not found${graydim} ${file}${nocolor}\n"

			if [ $syntaxStatus = 'unknown' ]; then
				printf "\n# TO VALIDATE\n${key} ${value}\n" >> "$file"
			elif [ $syntaxStatus = 'valid' ]; then
				printf "\n${key} ${value}\n" >> "$file"
			else
				printf "${red}synthax invalid${nocolor}\n"
				exit 1
			fi

			printf "${green}Add${gray} - Set ${blue}${key} ${purple}${value}${nocolor}\n"
		else 
			printf "${yellow}Update${gray} - Set ${blue}${key} ${purple}${value}${gray} ${graydim}${file}${nocolor}\n"
		fi

	else
		printf "${red}Failed to update ${key}${nocolor}\n"
		exit 1
	fi
}

#############
## HELPERS ##
#############

StartText () {
    printf "${blue}$commandName script${nocolor}
${whiitebold}This script is made for updating SSH configuration${nocolor}\n"
}
HowToUse () {
printf "\n❓ ${blue}How to use${gray}
${white}${commandName} -k <key> -v <value> --replace --verbose --silent${nocolor}\n"
}

#####
## START SCRIPT
#####

# Check if the script is being run with root privileges
if [ "$EUID" -ne 0 ]; then
    printf "${red}Please run ${c__fct2}$commandName${red} as root.${nocolor}\n"
    exit 1
else
   runningAsRoot=true
fi

# Check if sshd exists
test=""
test=$(command -v sshd)
if [[ -z "$test" ]]; then
	printf "${red}Service ${whiitebold}"${sshd_path}"${red} not found.${nocolor}\n"
	exit 1
else
	sshdExists=true
fi

# Récupération des paramètres en utilisant getopts
while [[ $# -gt 0 ]]; do
  	case $1 in
    	-k | --key)
			shift
			ARG_KEY=$1
			;;
		-v | --value)
			shift
			ARG_VALUE=$1
			;;
		-f | --file)
			shift
			ARG_FILE=$1
			;;
		--replace)
			shift
			ARG_REPLACE=true
			;;
		-h | --help)
			StartText
			HowToUse
			exit 0
			;;
		--verbose)
			verbose=true
			;;
		--silent)
			slient=true
			;;
		*)
			echo "$commandName - Option invalide: $1"
			exit 1
			;;
  	esac
  	shift
done


CheckIfParameters
if [ $? -eq 1 ]; then
	StartText
	HowToUse
	exit 1
fi

# if [[ $silent == false ]]; then
# 	StartText
# fi

CheckMandatoryParams

# Validate the syntax of the key and value
validate_key_syntax "$ARG_KEY" "$ARG_VALUE"
isValid=$?
if [ $isValid -eq 1 ]; then
	if [ $silent == false ]; then
		printf "${graydim}Cancel update.${nocolor}\n"
	fi
	exit 0;
	return
elif [ $isValid -eq 2 ] && [ $silent == false ]; then
	printf "${orange}Cannot validate syntax. ${graydim}Skip.${nocolor}\n"
fi

update_sshd_config "$ARG_KEY" "$ARG_VALUE" "$ARG_FILE"