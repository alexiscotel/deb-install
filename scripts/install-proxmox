#!/bin/bash

## VARIABLES
sshPort="2223"
networkCIDR="10.10.200.0/24"
localhostIP="10.10.200.219"
## - VARIABLES

## ARGUMENTS
vm_host=false
proxmox=false
hard_policy=false
ssh_port=
network_cidr=
localhost_ip=
bastion=
allowed_users=
allowed_groups=
denied_users=
denied_groups=
## - ARGUMENTS

CheckMandatoryParams() {
	printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	# Vérification des paramètres obligatoires
	printf "${c__fctAction}Checking for ssh parameter ...${nocolor}\n"
	if [[ -z $ssh_port ]]; then
		printf "${c__error}parameter ${c__msgVar}--sshport${c__error} is mandatory.${nocolor}\n"
		exit 1
	else
		printf "${c__fct2}SSH Port : ${c__value}${ssh_port}${nocolor}\n"
	fi

	printf "${c__fctAction}Checking for network IP/CIDIR parameter ...${nocolor}\n"
	if [[ -z $network_cidr ]]; then
		printf "${c__error}parameter ${c__msgVar}--networkcidr${c__error} is mandatory.${nocolor}
		\n"
		exit 1
	else
		printf "${c__fct2}network IP/CIDIR : ${c__value}${network_cidr}${nocolor}\n"
	fi

	printf "${c__fctAction}Checking for network IP/CIDIR parameter ...${nocolor}\n"
	if [[ -z $network_cidr ]]; then
		printf "${c__error}parameter ${c__msgVar}--networkcidr${c__error} is mandatory.${nocolor}
		\n"
		exit 1
	else
		printf "${c__fct2}network IP/CIDIR : ${c__value}${network_cidr}${nocolor}\n"
	fi

	printf "${c__fctAction}Checking for network IP/CIDIR parameter ...${nocolor}\n"
	if [[ -z $network_cidr ]]; then
		printf "${c__error}parameter ${c__msgVar}--networkcidr${c__error} is mandatory.${nocolor}
		\n"
		exit 1
	else
		printf "${c__fct2}network IP/CIDIR : ${c__value}${network_cidr}${nocolor}\n"
	fi

	printf "${c__fctAction}Checking for network IP/CIDIR parameter ...${nocolor}\n"
	if [[ -z $network_cidr ]]; then
		printf "${c__error}parameter ${c__msgVar}--networkcidr${c__error} is mandatory.${nocolor}
		\n"
		exit 1
	else
		printf "${c__fct2}network IP/CIDIR : ${c__value}${network_cidr}${nocolor}\n"
	fi
	printf "\n${c__success}Mandatory parameters OK${nocolor}
	\n"
}
## -----------------------------------------------------------------------
# CheckIfRoot
StartText
# Récupération des paramètres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
	--vm)
	  shift
	  vm_host=true
	  ;;
	--proxmox)
	  shift
	  proxmox=true
	  ;;
    -s | --sshport)
      shift
      ssh_port=$1
      ;;
    -n | --networkcidr)
      shift
      network_cidr=$1
      ;;
	-l | --localhostIP)
	  shift
	  localhost_ip=$1
	  ;;
	-b | --bastion)
	  shift
	  bastion=$1
	  ;;
    -u | --allowedusers)
      shift
    #   allowed_users=($(echo "$1" | tr ',' ' '))
      allowed_users=$1
      ;;
    -g | --allowedgroups)
      shift
    #   allowed_groups=($(echo "$1" | tr ',' ' '))
      allowed_groups=$1
      ;;
    -U | --deniedusers)
      shift
    #   denied_users=($(echo "$1" | tr ',' ' '))
      denied_users=$1
      ;;
    -G | --deniedgroups)
      shift
    #   denied_groups=($(echo "$1" | tr ',' ' '))
      denied_groups=$1
      ;;
    -h | --help)
	HowToUse
	exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done

if [[ $proxmox == true ]]; then
	mv /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources.list.d/pve-enterprise.list.disabled

	echo '# Proxmox community package repository' >> /etc/apt/sources.list
	echo 'deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription' >> /etc/apt/sources.list
fi

apt update
apt upgrade
apt dist-upgrade

apt install htop gzip


## start scripts
if [ $proxmox == true ]; then
	if [ $vm_host == false ]; then
		bash iptables-for-proxmox $ssh_port $network_cidr
	else
		printf "can't apply both --vm and --proxmox adding rules"
	fi
elif [ $vm_host == true ]; then
	bash iptables-for-vm $ssh_port $network_cidr $localhost_ip
fi

bash init-users -u $allowed_users -g $allowed_groups -U $denied_users -G $denied_groups

bash secure-ssh -p $ssh_port -n $network_cidr -u $allowed_users -g $allowed_groups -U $denied_users -G $denied_groups