#!/bin/bash

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__error=$red
c__success=$green


###############
## PARAMETERS
###############
commandPath=$0
commandName=`basename "$commandPath"`
pwd=$(pwd)
actualpwd=$(pwd)

ssh_port=
network_cidr=
localhost_ip=
bastion=

allowed_users=()
existing_allowed_users=()
allowed_groups=()
existing_allowed_groups=()
denied_users=()
existing_denied_users=()
denied_groups=()
existing_denied_groups=()


##############
## VARIABLES
##############
sshd_config="../files/etc/ssh/sshd_config"
PWD=$(pwd)

function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

CheckIfRoot() {
	if [ "$EUID" -ne 0 ]; then
	    printf "${red}Please run this script as root.${nocolor}\n"
	    exit 1
	fi
}

CheckMandatoryParams() {
	printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	# V√©rification des param√®tres obligatoires
	printf "${c__fctAction}Checking for ssh parameter ...${nocolor}\n"
	if [[ -z $ssh_port ]]; then
		printf "${c__error}parameter ${c__msgVar}-s | --ssh-port${c__error} is mandatory.${nocolor}\n"
		exit 1
	else
		printf "${c__fct2}SSH Port : ${c__value}${ssh_port}${nocolor}\n"
	fi

	printf "${c__fctAction}Checking for network IP/CIDIR parameter ...${nocolor}\n"
	if [[ -z $network_cidr ]]; then
		printf "${c__error}parameter ${c__msgVar}-n | --network-cidr${c__error} is mandatory.${nocolor}
		\n"
		exit 1
	else
		printf "${c__fct2}network IP/CIDIR : ${c__value}${network_cidr}${nocolor}\n"
	fi
	printf "\n${c__success}Mandatory parameters OK${nocolor}
	\n"
}

##########
## USERS 
##########
CheckIfUserExists() {
	local user=$1
	printf "${c__fctName}Checking user $user ...${nocolor}\n"
	getent passwd $user > /dev/null
	if [ $? -eq 0 ]; then
		printf "${c__success}user ${whiitebold}$user${c__success} exist${nocolor}
		\n"
		return 0
	else
		printf "${c__error}user ${whiitebold}$user${c__error} not exist${nocolor}
		\n"
		return 1
	fi
}
CheckIfGroupExists() {
	local group=$1
	printf "${c__fctName}Checking group $group ...${nocolor}\n"
	getent group $group > /dev/null
	if [ $? -eq 0 ]; then
		printf "${c__success}group ${whiitebold}$group${c__success} exist${nocolor}
		\n"
		return 0
	else
		printf "${c__error}group ${whiitebold}$group${c__error} not exist${nocolor}
		\n"
		return 1
	fi
}

CheckAllowUsers() {
	for usr in "${allowed_users[@]}"; do
		CheckIfUserExists $usr
		if [ $? -eq 0 ]; then
			existing_allowed_users+=("$usr")
		fi
	done
}
ManageAllowUsers() {
	printf "${c__fctName}Manage allowed users ...${nocolor}\n"
	# Configuration des utilisateurs autoris√©s
	if [[ ${#existing_allowed_users[@]} -gt 0 ]]; then
		bash ./update-ssh-config -k AllowUsers -v $(join_by , "${existing_allowed_users[@]}")
	else
		printf "${c__fctAction}No existing allowed users to add${nocolor}\n"
	fi
	printf "\n"
}

CheckAllowGroups() {
	for grp in "${allowed_groups[@]}"; do
		CheckIfGroupExists $grp
		if [ $? -eq 0 ]; then
			existing_allowed_groups+=("$grp")
		fi
	done
}
ManageAllowGroups() {
	printf "${c__fctName}Manage allowed groups ...${nocolor}\n"
	# Configuration des utilisateurs autoris√©s
	if [[ ${#existing_allowed_groups[@]} -gt 0 ]]; then
		bash ./update-ssh-config -k AllowGroups -v $(join_by , "${existing_allowed_groups[@]}")
	else
		printf "${c__fctAction}No allowed groups to add${nocolor}\n"
	fi
	printf "\n"
}

CheckDeniedUsers() {
	for usr in "${denied_users[@]}"; do
		CheckIfUserExists $usr
		if [ $? -eq 0 ]; then
			existing_denied_users+=("$usr")
		fi
	done
}
ManageDeniedUsers() {
	printf "${c__fctName}Manage denied users ...${nocolor}\n"
	# Configuration des utilisateurs autoris√©s
	if [[ ${#existing_denied_users[@]} -gt 0 ]]; then
		bash ./update-ssh-config -k DenyUsers -v $(join_by , "${existing_denied_users[@]}")
	else
		printf "${c__fctAction}No denied users to add${nocolor}\n"
	fi
	printf "\n"
}

CheckDeniedGroups() {
	for grp in "${denied_groups[@]}"; do
		CheckIfGroupExists $grp
		if [ $? -eq 0 ]; then
			existing_denied_groups+=("$grp")
		fi
	done
}
ManageDeniedGroups() {
	printf "${c__fctName}Manage denied groups ...${nocolor}\n"
	# Configuration des utilisateurs autoris√©s
	if [[ ${#existing_denied_groups[@]} -gt 0 ]]; then
		bash ./update-ssh-config -k DenyGroups -v $(join_by , "${existing_denied_groups[@]}")
	else
		printf "${c__fctAction}No denied groups to add${nocolor}\n"
	fi
	printf "\n"
}


###########
## CONFIG
###########
SavePreviousFile() {
	# Sauvegarde du fichier de configuration original
	cp $sshd_config $sshd_config.backup
}

UpdateConfig() {
	printf "${gray}Start reconfiguring ...${nocolor}\n"
	# lancement de la re-config
	# sudo ./scripts/update-ssh-config -k Port -v $ssh_port
	# sudo ./scripts/update-ssh-config -k ListenAddress -v $network_cidr
	# sudo ./scripts/update-ssh-config -k AllowUsers -v $allowed_users
	# sudo ./scripts/update-ssh-config -k AllowGroups -v $allowed_groups
	# sudo ./scripts/update-ssh-config -k DenyUsers -v $denied_users
	# sudo ./scripts/update-ssh-config -k DenyGroups -v $denied_groups
}

DisplayConfig() {
	cat "$sshd_config"
}


StartText () {
clear
printf "üîê ${blue}$commandName script ${nocolor}üîê

${whiitebold}This script is made for easily configure .bashrc
Get a prettier shell than the default one üòé
Follow the next steps to configure it !${nocolor}
\n"
}
HowToUse() {
printf "‚ùì ${blue}How to use${gray}

${commandName} -p 2222 -n 192.168.0.1/24 -u username1,sshuser@ip:port -g group1,group2 -U username3,sshuser@ip:port -G group4${nocolor}

${whiitebold}Parameters :${gray}
    -p  --ssh-port       : SSH port
    -n  --network-cidr   : Network CIDR
    -u  --allowed-users  : Allowed users to connect through SSH
    -g  --allowed-groups : Allowed groups to connect through SSH
    -U  --denied-users   : Denied users to connect through SSH
    -G  --denied-groups  : Denied groups to connect through SSH
    -h  --help          : show this message
${nocolor}\n"
}

## ------------------------------------------------------------------------------------------------------------------------------------ ##

# CheckIfRoot
StartText
# R√©cup√©ration des param√®tres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
    -p | --ssh-port)
      shift
      ssh_port=$1
      ;;
    -n | --network-cidr)
      shift
      network_cidr=$1
      ;;
    -u | --allowed-users)
      shift
      allowed_users=($(echo "$1" | tr ',' ' '))
      ;;
    -g | --allowed-groups)
      shift
      allowed_groups=($(echo "$1" | tr ',' ' '))
      ;;
    -U | --denied-users)
      shift
      denied_users=($(echo "$1" | tr ',' ' '))
      ;;
    -G | --denied-groups)
      shift
      denied_groups=($(echo "$1" | tr ',' ' '))
      ;;
    -h | --help)
	HowToUse
	exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done

CheckMandatoryParams

if [[ "${#allowed_users[@]}" -gt 0 ]]; then
	printf "${blue}Checking allow users ...${nocolor}\n"
	CheckAllowUsers
	ManageAllowUsers
else
	printf "no allowed users to treate\n"
fi


if [[ "${#allowed_groups[@]}" -gt 0 ]]; then
	printf "${blue}Checking allow groups ...${nocolor}\n"
	CheckAllowGroups
	ManageAllowGroups
else
	printf "no allowed groups to treate\n"
fi

if [[ "${#denied_users[@]}" -gt 0 ]]; then
	printf "${blue}Checking denied users ...${nocolor}\n"
	CheckDeniedUsers
	ManageDeniedUsers
else
	printf "no denied groups to treate\n"
fi

if [[ "${#denied_groups[@]}" -gt 0 ]]; then
	printf "${blue}Checking denied groups ...${nocolor}\n"
	CheckDeniedGroups
	ManageDeniedGroups
else
	printf "no denied groups to treate\n"
fi

exit 0