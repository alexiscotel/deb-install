#!/bin/bash

# if [ "$EUID" -ne 0 ]; then
# 	printf "${red}Please run this script as root.${nocolor}\n"
# 	g_errors+=("Run this script as root")
# 	exit 1
# fi

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__error=$red
c__warning=$orange
c__notice=$yellow
c__success=$green


###############
## PARAMETERS
###############
commandPath=$0
commandName=`basename "$commandPath"`

ssh_port=
network_cidr=
localhost_ip=
bastion=

allowed_users=()
existing_allowed_users=()
allowed_groups=()
existing_allowed_groups=()
denied_users=()
existing_denied_users=()
denied_groups=()
existing_denied_groups=()


##########################################
## VARIABLES
##########################################
## EDITABLES (does match with system file)
# sshd_config="../files/etc/ssh/sshd_config"
# hosts_allow="../files/etc/hosts.allow"
sshd_config=
# sshd_config="/etc/ssh/sshd_config"
hosts_allow="/etc/hosts.allow"

PWD=$(pwd)
errors=()
pwd=$(pwd)
actualpwd=$(pwd)
gentenvInvalid=false

verbose=false
silent=false

##########################################
## FUNCTIONS
##########################################
function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

CheckIfParameters() {
	if [ -z "$ssh_port" ] && [ -z "$network_cidr" ] && [ -z "$localhost_ip" ] && [ -z "$bastion" ] && [ "${#allowed_users[@]}" -eq 0 ] && [ "${#allowed_groups[@]}" -eq 0 ] && [ "${#denied_users[@]}" -eq 0 ] && [ "${#denied_groups[@]}" -eq 0 ] && [ $silent == false ]; then
		return 1
	else
		return 0
	fi
}
CheckMandatoryParams() {
	local isError=false
	if [ $verbose == true ] && [ $silent == false ]; then
		printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	fi
	
	# check file parameter
	if [ $verbose == true ] && [ $silent == false ]; then
		printf "${c__fctAction}Checking for file parameter ...${nocolor}\n"
	fi

	if [[ -z $sshd_config ]]; then
		printf "${c__error}parameter ${c__msgVar}-f | --file${c__error} is mandatory.${nocolor}\n"
		errors+=("file is mandatory")
		isError=true
	else
		if [ $verbose == true ] && [ $silent == false ]; then
			printf "    ${c__fct2}file : ${c__value}${sshd_config}${nocolor}\n"
		fi
	fi

	# # check ssh port parameter
	# if [ $verbose == true ] && [ $silent == false ]; then
	# 	printf "${c__fctAction}Checking for ssh parameter ...${nocolor}\n"
	# fi

	# if [[ -z $ssh_port ]]; then
	# 	printf "${c__error}parameter ${c__msgVar}-p | --ssh-port${c__error} is mandatory.${nocolor}\n"
	# 	errors+=("SSH port is mandatory")
	# 	isError=true
	# else
	# 	if [ $verbose == true ] && [ $silent == false ]; then
	# 		printf "    ${c__fct2}SSH Port : ${c__value}${ssh_port}${nocolor}\n"
	# 	fi
	# fi


	# # check network host parameter
	# if [ $verbose == true ] && [ $silent == false ]; then
	# 	printf "${c__fctAction}Checking for network host parameter ...${nocolor}\n"
	# fi

	# if [[ -z $network_cidr ]]; then
	# 	printf "${c__error}parameter ${c__msgVar}-n | --network-host${c__error} is mandatory.${nocolor}
	# 	\n"
	# 	errors+=("Network IP/CIDR is mandatory")
	# 	isError=true
	# else
	# 	if [ $verbose == true ] && [ $silent == false ]; then
	# 		printf "    ${c__fct2}network host : ${c__value}${network_cidr}${nocolor}\n"
	# 	fi
	# fi


	if [ $isError == true ]; then
		exit 1
	else
		if [ $verbose == true ] && [ $silent == false ]; then
			printf "  ${c__success}Mandatory parameters OK${nocolor}\n"
		fi
	fi
}

##########
## USERS 
##########

CheckIfItemExists() {
	local item=$1
	local type=$2

	# TODO: check if string is a user or a group

	if [ "$type" == 'user' ]; then
		printf "${c__fctAction}Checking if ${c__value}$item${c__fctAction} is a valid Linux user ...${nocolor}\n"
		if id -u "$item" >/dev/null 2>&1; then
			printf "${c__value}$item${c__fctAction} is a valid Linux user.${nocolor}\n"
			return 0
		else
			printf "${c__value}$item${c__error} is not a valid Linux user.${nocolor}\n"
			return 1
		fi
	elif [ "$type" == 'group' ]; then
		printf "${c__fctAction}Checking if ${c__value}$item${c__fctAction} is a valid Linux group ...${nocolor}\n"
		if ! command -v getent > /dev/null; then
			gentenvInvalid=true
			if [ $verbose == true ]; then
				printf "${c__error}command getenv not found${nocolor}\n"
			fi
			return 2
		else
			if [ $verbose == true ]; then
				printf "${c__fctAction}command getenv found${nocolor}\n"
			fi
			gentenvInvalid=false

			# Check if the string is a valid group
			if getent group "$item" > /dev/null 2>&1; then
				printf "${c__value}$item${c__fctAction} is a valid Linux group.${nocolor}\n"
				return 0
			else
				printf "${c__value}$item${c__error} is not a valid Linux group.${nocolor}\n"
				return 1
			fi
		fi
	else
		printf "${c__error}parameter ${c__msgVar}type${c__error} is mandatory.${nocolor}\n"
		errors+=("type is mandatory")
		return 1
	fi

	# printf "   ${c__msgVar}${item}${c__fctAction} ...${nocolor}"
	# getent passwd $item > /dev/null 2>&1
	# local result=$?
	# if [ $result -eq 0 ]; then
	# 	printf "${c__success} found${nocolor}\n"
	# 	return 0
	# else
	# 	printf "${c__error} does not exists${nocolor}.\n"
	# 	printf "${c__notice}Create user before use this script${nocolor}\n"
	# 	return 1
	# fi
}


CheckAllowUsers() {
	for usr in "${allowed_users[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfItemExists $usr 'user'
			local test=$?
			if [ $test -eq 0 ]; then
				existing_allowed_users+=("$usr")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__error}check for \"${usr}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${usr}\"${nocolor}\n"
			fi
		fi
	done
}
ManageAllowUsers() {
	if [[ ${#existing_allowed_users[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage allowed users ...${nocolor}\n"
		fi

		if [ $silent == true ]; then
			bash ./update-config -k AllowUsers -v $(join_by , "${existing_allowed_users[@]}") -f "$sshd_config" --silent
		elif [ $verbose == true ]; then
			bash ./update-config -k AllowUsers -v $(join_by , "${existing_allowed_users[@]}") -f "$sshd_config" --verbose
		else
			bash ./update-config -k AllowUsers -v $(join_by , "${existing_allowed_users[@]}") -f "$sshd_config"
		fi
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing allowed users to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

CheckAllowGroups() {
	for grp in "${allowed_groups[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfItemExists $grp 'group'
			local test=$?
			if [ $test -eq 0 ]; then
				existing_allowed_groups+=("$grp")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__error}check for \"${grp}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${grp}\"${nocolor}\n"
			fi
		fi
	done
}
ManageAllowGroups() {
	if [[ ${#existing_allowed_groups[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage allowed groups ...${nocolor}\n"
		fi

		if [ $silent == true ]; then
			bash ./update-config -k AllowGroups -v $(join_by , "${existing_allowed_groups[@]}") -f "$sshd_config" --silent
		elif [ $verbose == true ]; then
			bash ./update-config -k AllowGroups -v $(join_by , "${existing_allowed_groups[@]}") -f "$sshd_config" --verbose
		else
			bash ./update-config -k AllowGroups -v $(join_by , "${existing_allowed_groups[@]}") -f "$sshd_config"
		fi
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing allowed groups to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

CheckDeniedUsers() {
	for usr in "${denied_users[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfItemExists $usr 'user'
			local test=$?
			if [ $test -eq 0 ]; then
				existing_denied_users+=("$usr")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__error}check for \"${usr}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${usr}\"${nocolor}\n"
			fi
		fi
	done
}
ManageDeniedUsers() {
	if [[ ${#existing_denied_users[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage denied users ...${nocolor}\n"
		fi

		if [ $silent == true ]; then
			bash ./update-config -k DenyUsers -v $(join_by , "${existing_denied_users[@]}") -f "$sshd_config" --silent
		elif [ $verbose == true ]; then
			bash ./update-config -k DenyUsers -v $(join_by , "${existing_denied_users[@]}") -f "$sshd_config" --verbose
		else
			bash ./update-config -k DenyUsers -v $(join_by , "${existing_denied_users[@]}") -f "$sshd_config"
		fi
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing denied users to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

CheckDeniedGroups() {
	for grp in "${denied_groups[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfItemExists $grp 'group'
			local test=$?
			if [ $test -eq 0 ]; then
				existing_denied_groups+=("$grp")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__error}check for \"${grp}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${grp}\"${nocolor}\n"
			fi
		fi
	done
}
ManageDeniedGroups() {
	if [[ ${#existing_denied_groups[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage denied groups ...${nocolor}\n"
		fi

		if [ $silent == true ]; then
			bash ./update-config -k DenyGroups -v $(join_by , "${existing_denied_groups[@]}") -f "$sshd_config" --silent
		elif [ $verbose == true ]; then
			bash ./update-config -k DenyGroups -v $(join_by , "${existing_denied_groups[@]}") -f "$sshd_config" --verbose
		else
			bash ./update-config -k DenyGroups -v $(join_by , "${existing_denied_groups[@]}") -f "$sshd_config"
		fi
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing denied groups to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

########
## SSH
########
ManageSSH() {
	if [[ -z $ssh_port ]]; then
		return 0
	fi

	if [ $silent == false ]; then
		printf "\n${c__fctName}Update ssh port...${nocolor}\n"
	fi

	# if [ $silent == true ] && [ $verbose == true ]; then
	# 	bash ./update-config -k Port -v $ssh_port --verbose --silent
	# elif [ $silent == true ]; then
	if [ $silent == true ]; then
		bash ./update-config -k Port -v $ssh_port -f "$sshd_config" --silent
	elif [ $verbose == true ]; then
		bash ./update-config -k Port -v $ssh_port -f "$sshd_config" --verbose
	else
		bash ./update-config -k Port -v $ssh_port -f "$sshd_config"
	fi
}

########
## NETWORK
########
ManageNetwork() {
	if [[ -z $network_cidr ]]; then
		return 0
	fi

	if [ $silent == false ]; then
		printf "\n${c__fctName}Manage network ...${nocolor}\n"
	fi

	if [ -f "$hosts_allow" ]; then

		# find in file if network_cidr already exists
		local found=$(grep -c "$network_cidr" "$hosts_allow")
		if [ $found -eq 0 ]; then
			if [ $silent == false ]; then
				printf "${c__fctAction}Add network_cidr ${c__value}${network_cidr}${nocolor} to ${c__msgVar}${hosts_allow}${nocolor}\n"
			fi
			echo "sshd: $network_cidr : ALLOW" >> "$hosts_allow"
		else
			if [ $silent == false ]; then
				printf "${c__fctAction}Network_cidr ${c__value}${network_cidr}${nocolor} already exists in ${c__msgVar}${hosts_allow}${nocolor}\n"
			fi
		fi

		# echo "sshd: $network_cidr : ALLOW" >> "$hosts_allow"
		# if [ $silent == false ]; then
		# 	printf "${c__success}file \"$hosts_allow\" updated${nocolor}\n"
		# fi
	else
		if [ $silent == false ]; then
			printf "${c__error}file \"$hosts_allow\" does not exists. ${graydim}Skip${nocolor}\n"
		fi
	fi
	# if [ $silent == true ] && [ $verbose == true ]; then
	# 	bash ./update-config -k Port -v $ssh_port --verbose --silent
	# elif [ $silent == true ]; then
	# 	bash ./update-config -k Port -v $ssh_port --silent
	# elif [ $verbose == true ]; then
	# 	bash ./update-config -k Port -v $ssh_port --verbose
	# else
	# 	bash ./update-config -k Port -v $ssh_port
	# fi
}


###########
## CONFIG
###########
SavePreviousFile() {
	if [ $silent == false ]; then
		printf "${c__fctAction}Save previous config file ...${nocolor}\n"
	fi
	cp $sshd_config $sshd_config.backup
}

DisplayConfig() {
	if [ $silent == false ]; then
		printf "${c__fctAction}Display config file ...${nocolor}\n"
	fi
	cat "$sshd_config"
}

## LOGS
GenerateErrorLogs() {
	local file=$1
	
	if [ ${#errors[@]} -gt 0 ]; then
		if [ ! -f $file ]; then
			touch $file
		fi

		printf "%s\n" "${errors[@]}" > $file
	fi
}


StartText () {
	printf "🔐 ${blue}$commandName script ${nocolor}🔐\n"
}
HowToUse() {
	printf "❓ ${blue}How to use${gray}\n"
	printf "${whiitebold}This script is made to init ssh configuration\n"
  	printf "  - It will update ssh port\n"
	printf "  - It will update network configuration\n"
	printf "  - It will allow users and groups to connect${nocolor}\n"
	printf "\n"
	printf "${commandName} -p 2222 -n 192.168.0.1/24 -u username1,sshuser@ip:port -g group1,group2 -U username3,sshuser@ip:port -G group4${nocolor}\n"
	printf "\n"
	printf "${whiitebold}Parameters :${gray}\n"
	printf "  -f  --file         : SSH config file (/etc/ssh/sshd_config)\n"
	printf "\n"
	printf "  -p  --ssh-port     : SSH port\n"
	printf "  -n  --network-host : Network host\n"
	printf "\n"
	printf "  -u  --allow-users  : Allowed users to connect through SSH\n"
	printf "  -g  --allow-groups : Allowed groups to connect through SSH\n"
	printf "  -U  --deny-users   : Denied users to connect through SSH\n"
	printf "  -G  --deny-groups  : Denied groups to connect through SSH\n"
	printf "\n"
	printf "  --verbose    : show logs\n"
	printf "  --silent     : hide logs\n"
	printf "\n"
	printf "  -h  --help   : show this message\n"
	printf "${nocolor}\n"
}




## ------------------------------------------------------------------------------------------------------------------------------------ ##



# Récupération des paramètres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
    -p | --ssh-port)
      shift
      ssh_port=$1
      ;;
    -n | --network-host)
      shift
      network_cidr=$1
      ;;
    -u | --allow-users)
      shift
      allowed_users=($(echo "$1" | tr ',' ' '))
      ;;
    -g | --allow-groups)
      shift
      allowed_groups=($(echo "$1" | tr ',' ' '))
      ;;
    -U | --deny-users)
      shift
      denied_users=($(echo "$1" | tr ',' ' '))
      ;;
    -G | --deny-groups)
      	shift
      	denied_groups=($(echo "$1" | tr ',' ' '))
      	;;
	-f | --file)
		shift
		sshd_config=$1
		;;
	--verbose)
		shift
		verbose=true
		;;
	--silent)
		shift
		silent=true
		;;
	-h | --help)
		StartText
		HowToUse
		exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done

CheckIfParameters
if [ $? -eq 1 ]; then
	StartText
	HowToUse
	exit 1
fi

if [[ $silent == false ]]; then
	StartText
fi

CheckMandatoryParams


ManageSSH
ManageNetwork


if [[ "${#allowed_users[@]}" -gt 0 ]]; then
	if [ $silent == false ]; then
		printf "${c__fctName}Checking allow users ...${nocolor}\n"
	fi
	CheckAllowUsers
	ManageAllowUsers
# elif [ $verbose == true ]; then
# 	printf "${c__fctAction}no allowed users to manage${nocolor}\n"
fi


if [[ "${#allowed_groups[@]}" -gt 0 ]]; then
	printf "${c__fctName}Checking allow groups ...${nocolor}\n"
	CheckAllowGroups
	ManageAllowGroups
# elif [ $verbose == true ]; then
# 	printf "${c__fctAction}no allowed groups to create${nocolor}\n"
fi

if [[ "${#denied_users[@]}" -gt 0 ]]; then
	printf "${c__fctName}Checking denied users ...${nocolor}\n"
	CheckDeniedUsers
	ManageDeniedUsers
# elif [ $verbose == true ]; then
# 	printf "${c__fctAction}no denied users to create${nocolor}\n"
fi

if [[ "${#denied_groups[@]}" -gt 0 ]]; then
	printf "${c__fctName}Checking denied groups ...${nocolor}\n"
	CheckDeniedGroups
	ManageDeniedGroups
# elif [ $verbose == true ]; then
# 	printf "${c__fctAction}no denied groups to create${nocolor}\n"
fi

# GenerateErrorLogs $actualpwd/logs/init-ssh-error.log

exit 0