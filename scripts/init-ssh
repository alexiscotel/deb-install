#!/bin/bash

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__error=$red
c__warning=$orange
c__notice=$yellow
c__success=$green


###############
## PARAMETERS
###############
commandPath=$0
commandName=`basename "$commandPath"`

ssh_port=
network_cidr=
localhost_ip=
bastion=

allowed_users=()
existing_allowed_users=()
allowed_groups=()
existing_allowed_groups=()
denied_users=()
existing_denied_users=()
denied_groups=()
existing_denied_groups=()


##############
## VARIABLES
##############
sshd_config="../files/etc/ssh/sshd_config"
PWD=$(pwd)
errors=()
pwd=$(pwd)
actualpwd=$(pwd)
gentenvInvalid=false

verbose=false
silent=false

function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

CheckIfRoot() {
	if [ "$EUID" -ne 0 ]; then
	    printf "${red}Please run this script as root.${nocolor}\n"
		errors+=("Run this script as root")
	    exit 1
	fi
}

CheckMandatoryParams() {
	local isError=false
	if [ $verbose == true ] && [ $silent == false ]; then
		printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	fi
	
	# Vérification des paramètres obligatoires
	if [ $verbose == true ] && [ $silent == false ]; then
		printf "${c__fctAction}Checking for ssh parameter ...${nocolor}\n"
	fi

	if [[ -z $ssh_port ]]; then
		printf "${c__error}parameter ${c__msgVar}-p | --ssh-port${c__error} is mandatory.${nocolor}\n"
		errors+=("SSH port is mandatory")
		isError=true
	else
		if [ $verbose == true ] && [ $silent == false ]; then
			printf "    ${c__fct2}SSH Port : ${c__value}${ssh_port}${nocolor}\n"
		fi
	fi

	if [ $verbose == true ] && [ $silent == false ]; then
		printf "${c__fctAction}Checking for network host parameter ...${nocolor}\n"
	fi

	if [[ -z $network_cidr ]]; then
		printf "${c__error}parameter ${c__msgVar}-n | --network-host${c__error} is mandatory.${nocolor}
		\n"
		errors+=("Network IP/CIDR is mandatory")
		exit 1
	else
		if [ $verbose == true ] && [ $silent == false ]; then
			printf "    ${c__fct2}network host : ${c__value}${network_cidr}${nocolor}\n"
		fi
	fi

	if [ $isError == true ]; then
		exit 1
	else
		if [ $verbose == true ] && [ $silent == false ]; then
printf "
  ${c__success}Mandatory parameters OK${nocolor}
"
		fi
	fi
}

##########
## USERS 
##########
CheckIfUserExists() {
	local user=$1
	if [ $silent == false ]; then
		printf "${c__fctName}Checking user $user ...${nocolor}\n"
	fi

	if ! command -v getent > /dev/null; then
		gentenvInvalid=true
		printf "${c__error}command getenv not found${nocolor}\n"
		return 2
	else
		gentenvInvalid=false
	fi

	getent passwd $user > /dev/null
	if [ $? -eq 0 ]; then
		if [ $silent == false ]; then
			printf "${c__success}user ${whiitebold}$user${c__success} exist${nocolor}\n"
		fi
		return 0
	else
		if [ $silent == false ]; then
			printf "${c__error}user ${whiitebold}$user${c__error} not exist${nocolor}\n"
		fi
		return 1
	fi
}
CheckIfGroupExists() {
	local group=$1
	if [ $silent == false ]; then
		printf "${c__fctName}Checking group $group ...${nocolor}\n"
	fi

	if ! command -v getent > /dev/null; then
		gentenvInvalid=true
		printf "${c__error}command getenv not found${nocolor}\n"
		return 2
	else
		gentenvInvalid=false
	fi
	
	getent group $group > /dev/null
	if [ $? -eq 0 ]; then
		
		if [ $silent == false ]; then
			printf "${c__success}group ${whiitebold}$group${c__success} exist${nocolor}\n"
		fi
		return 0
	else
		if [ $silent == false ]; then
			printf "${c__error}group ${whiitebold}$group${c__error} not exist${nocolor}\n"
		fi
		return 1
	fi
}


CheckAllowUsers() {
	for usr in "${allowed_users[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfUserExists $usr
			local test=$?
			if [ $test -eq 0 ]; then
				existing_allowed_users+=("$usr")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__warning}check for \"${usr}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${usr}\"${nocolor}\n"
			fi
		fi
	done
}
ManageAllowUsers() {
	if [[ ${#existing_allowed_users[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage allowed users ...${nocolor}\n"
		fi
		
		bash ./update-ssh-config -k AllowUsers -v $(join_by , "${existing_allowed_users[@]}")
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing allowed users to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

CheckAllowGroups() {
	for grp in "${allowed_groups[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfGroupExists $grp
			local test=$?
			if [ $test -eq 0 ]; then
				existing_allowed_groups+=("$grp")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__warning}check for \"${grp}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${grp}\"${nocolor}\n"
			fi
		fi
	done
}
ManageAllowGroups() {
	if [[ ${#existing_allowed_groups[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage allowed groups ...${nocolor}\n"
		fi

		bash ./update-ssh-config -k AllowGroups -v $(join_by , "${existing_allowed_groups[@]}")
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing allowed groups to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

CheckDeniedUsers() {
	for usr in "${denied_users[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfUserExists $usr
			local test=$?
			if [ $test -eq 0 ]; then
				existing_denied_users+=("$usr")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__warning}check for \"${usr}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${usr}\"${nocolor}\n"
			fi
		fi
	done
}
ManageDeniedUsers() {
	if [[ ${#existing_denied_users[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage denied users ...${nocolor}\n"
		fi
		
		bash ./update-ssh-config -k DenyUsers -v $(join_by , "${existing_denied_users[@]}")
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing denied users to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

CheckDeniedGroups() {
	for grp in "${denied_groups[@]}"; do
		if [ $gentenvInvalid == false ]; then
			CheckIfGroupExists $grp
			local test=$?
			if [ $test -eq 0 ]; then
				existing_denied_groups+=("$grp")
			elif [ $test -eq 2 ]; then
				if [ $silent == false ]; then
					printf "${c__warning}check for \"${grp}\" fail${nocolor}\n"
				fi
			fi
		else
			if [ $silent == false ]; then
				printf "${c__notice}check skip for ${whiitebold}\"${grp}\"${nocolor}\n"
			fi
		fi
	done
}
ManageDeniedGroups() {
	if [[ ${#existing_denied_groups[@]} -gt 0 ]]; then
		if [ $silent == false ]; then
			printf "${c__fctName}Manage denied groups ...${nocolor}\n"
		fi

		bash ./update-ssh-config -k DenyGroups -v $(join_by , "${existing_denied_groups[@]}")
	else
		if [ $silent == false ]; then
			printf "${c__fctAction}No existing denied groups to manage${nocolor}\n"
		fi
	fi
	printf "\n"
}

########
## SSH
########
ManageSSH() {
	if [ $silent == false ]; then
		printf "${c__fctName}Update ssh port ...${nocolor}\n"
	fi

	if [ $silent == true ] && [ $verbose == true ]; then
		bash ./update-ssh-config -k Port -v $ssh_port --verbose --silent
	elif [ $silent == true ]; then
		bash ./update-ssh-config -k Port -v $ssh_port --silent
	elif [ $verbose == true ]; then
		bash ./update-ssh-config -k Port -v $ssh_port --verbose
	else
		bash ./update-ssh-config -k Port -v $ssh_port
	fi
}

########
## NETWORK
########
ManageNetwork() {
	if [ $silent == false ]; then
		printf "${c__fctName}Manage network ...${nocolor}\n"
	fi

	if [ -f "/etc/hosts.allow" ]; then
		echo "sshd: 10.10.200.0/24 : ALLOW" >> "/etc/hosts.allow"
		if [ $silent == false ]; then
			printf "${c__success}file \"/etc/hosts.allow\" updated${nocolor}\n"
		fi
	else
		if [ $silent == false ]; then
			printf "${c__error}file \"/etc/hosts.allow\" does not exists. ${graydim}Skip${nocolor}\n"
		fi
	fi
	# if [ $silent == true ] && [ $verbose == true ]; then
	# 	bash ./update-ssh-config -k Port -v $ssh_port --verbose --silent
	# elif [ $silent == true ]; then
	# 	bash ./update-ssh-config -k Port -v $ssh_port --silent
	# elif [ $verbose == true ]; then
	# 	bash ./update-ssh-config -k Port -v $ssh_port --verbose
	# else
	# 	bash ./update-ssh-config -k Port -v $ssh_port
	# fi
}


###########
## CONFIG
###########
SavePreviousFile() {
	if [ $silent == false ]; then
		printf "${c__fctAction}Save previous config file ...${nocolor}\n"
	fi
	cp $sshd_config $sshd_config.backup
}

DisplayConfig() {
	if [ $silent == false ]; then
		printf "${c__fctAction}Display config file ...${nocolor}\n"
	fi
	cat "$sshd_config"
}

## LOGS
GenerateErrorLogs() {
	local file=$1
	
	if [ ${#errors[@]} -gt 0 ]; then
		if [ ! -f $file ]; then
			touch $file
		fi

		printf "%s\n" "${errors[@]}" > $file
	fi
}


StartText () {
# clear
printf "🔐 ${blue}$commandName script ${nocolor}🔐

${whiitebold}This script is made for easily configure .bashrc
Get a prettier shell than the default one 😎
Follow the next steps to configure it !${nocolor}
${yellow}TODO: implements fail2ban security${nocolor}
\n"
}
HowToUse() {
printf "❓ ${blue}How to use${gray}

${commandName} -p 2222 -n 192.168.0.1/24 -u username1,sshuser@ip:port -g group1,group2 -U username3,sshuser@ip:port -G group4${nocolor}

${whiitebold}Parameters :${gray}
    -p  --ssh-port     : SSH port
    -n  --network-host : Network host

    -u  --allow-users  : Allowed users to connect through SSH
    -g  --allow-groups : Allowed groups to connect through SSH
    -U  --deny-users   : Denied users to connect through SSH
    -G  --deny-groups  : Denied groups to connect through SSH

	--verbose          : Display logs
	--silent           : Don't display logs

    -h  --help         : show this message
${nocolor}\n"
}

## ------------------------------------------------------------------------------------------------------------------------------------ ##

# Récupération des paramètres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
    -p | --ssh-port)
      shift
      ssh_port=$1
      ;;
    -n | --network-host)
      shift
      network_cidr=$1
      ;;
    -u | --allow-users)
      shift
      allowed_users=($(echo "$1" | tr ',' ' '))
      ;;
    -g | --allow-groups)
      shift
      allowed_groups=($(echo "$1" | tr ',' ' '))
      ;;
    -U | --deny-users)
      shift
      denied_users=($(echo "$1" | tr ',' ' '))
      ;;
    -G | --deny-groups)
      	shift
      	denied_groups=($(echo "$1" | tr ',' ' '))
      	;;
	--verbose)
		shift
		verbose=true
		;;
	--silent)
		shift
		silent=true
		;;
	-h | --help)
		StartText
		HowToUse
		exit 0
		;;
	*)
      echo "Option invalide: $1"
      exit 1
      ;;
  esac
  shift
done

# CheckIfRoot
if [[ $silent == false ]]; then
	clear
	StartText
fi

CheckMandatoryParams

if [[ "${#allowed_users[@]}" -gt 0 ]]; then
	if [ $silent == false ]; then
		printf "${blue}Checking allow users ...${nocolor}\n"
	fi
	CheckAllowUsers
	ManageAllowUsers
elif [ $verbose == true ]; then
	printf "${c__notice}no allowed users to manage${nocolor}\n"
fi


if [[ "${#allowed_groups[@]}" -gt 0 ]]; then
	printf "${blue}Checking allow groups ...${nocolor}\n"
	CheckAllowGroups
	ManageAllowGroups
elif [ $verbose == true ]; then
	printf "${c__notice}no allowed groups to create${nocolor}\n"
fi

if [[ "${#denied_users[@]}" -gt 0 ]]; then
	printf "${blue}Checking denied users ...${nocolor}\n"
	CheckDeniedUsers
	ManageDeniedUsers
elif [ $verbose == true ]; then
	printf "${c__notice}no denied users to create${nocolor}\n"
fi

if [[ "${#denied_groups[@]}" -gt 0 ]]; then
	printf "${blue}Checking denied groups ...${nocolor}\n"
	CheckDeniedGroups
	ManageDeniedGroups
elif [ $verbose == true ]; then
	printf "${c__notice}no denied groups to create${nocolor}\n"
fi

printf "\n"
ManageSSH
printf "\n"
ManageNetwork

# GenerateErrorLogs $actualpwd/logs/init-ssh-error.log

exit 0