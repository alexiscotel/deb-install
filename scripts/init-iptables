#!/bin/bash

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__value2=$purple
c__error=$red
c__warning=$orange
c__notice=$yellow
c__success=$green


###############
## CHECK ROOT
###############
if [ "$EUID" -ne 0 ]; then
	printf "${c__error}Please run this script as root.${nocolor}\n"
	exit 1
fi

###############
## VARIABLES
###############
commandPath=$0
commandName=`basename "$commandPath"`
pwd=$(pwd)
actualpwd=$(pwd)
g_errors=()
g_warnings=()
g_notices=()
cmd_iptables_found=false
force_insert=false

declare -a g_output=()
declare -a ssh_rules_input_accept=()
declare -a ssh_rules_input_drop=()

##############
## ARGUMENTS
##############
verbose=false
silent=false
ssh_port=
ssh_allowed_ips_str=
declare -a ssh_allowed_ips=()
ssh_denied_ips_str=
declare -a ssh_denied_ips=()
drop_ssh=false
active_icmp=false


########################
## VALIDATOR FUNCTIONS
########################

CheckIptables() {

	if ! command -v iptables > /dev/null; then
		cmd_iptables_found=false
		printf "${c__error}command ${c__fct2}iptables${c__error} not found${nocolor}\n"		
		return 1
	else
		cmd_iptables_found=true
		return 0
	fi
}
CheckIfParameters() {

	if ([ ! -z "$ssh_allowed_ips_str" ] && [ ! -z "$ssh_denied_ips_str" ]) &&  [ -z "$ssh_port" ]; then
		return 1
	elif [ -z "$ssh_port" ] && [ -z "$ssh_allowed_ips_str" ] && [ -z "$ssh_denied_ips_str" ] && [ "$active_icmp" = false ] && [ "$drop_ssh" = false ]; then
		return 1
	else
		return 0
	fi

}

CheckMandatoryParams() {
	if [ $silent == false ]; then
		printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	fi

	# if ssh_allowed_ips_str or ssh_denied_ips_str is not empty, check that ssh_port is not empty
	if [ "$ssh_allowed_ips_str" != "" ] || [ "$ssh_denied_ips_str" != "" ]; then
		if [ "$ssh_port" == "" ]; then
			mand_errors+=("${c__error}parameter ${c__msgVar}-p | --ssh-port${c__error} is mandatory.${nocolor}")
		fi
	fi

	# if ssh_port is not empty, check that ssh_allowed_ips_str or ssh_denied_ips_str have at least one ip
	if [ "$ssh_port" != "" ]; then
		if [ "$ssh_allowed_ips_str" == "" ] && [ "$ssh_denied_ips_str" == "" ]; then
			mand_errors+=("${c__error}parameter ${c__msgVar}-s | --ssh-allow${c__error} or ${c__msgVar}-S | --ssh-deny${c__error} is mandatory.${nocolor}")
		fi
	fi

	# check if ssh_allowed_ips_str contains valid IPs
	if [ "$ssh_allowed_ips_str" != "" ]; then
		IFS=',' read -r -a tmp <<< "${ssh_allowed_ips_str}"
		CheckIfIPsArrayOK "${tmp[@]}"
		local test=$?
		if [ $test -eq 1 ]; then
			mand_errors+=("${c__error}parameter ${c__msgVar}-s | --ssh-allow${c__error} is not valid.${nocolor}")
		fi
	fi

	# check if ssh_denied_ips_str contains valid IPs
	if [ "$ssh_denied_ips_str" != "" ]; then
		IFS=',' read -r -a tmp <<< "${ssh_denied_ips_str}"
		CheckIfIPsArrayOK "${tmp[@]}"
		local test=$?
		if [ $test -eq 1 ]; then
			mand_errors+=("${c__error}parameter ${c__msgVar}-S | --ssh-deny${c__error} is not valid.${nocolor}")
		fi
	fi
	

	# check if mand_errors contains errors and show them
	if [ ${#mand_errors[@]} -gt 0 ]; then
		if [ $silent == false ]; then
			for i in "${mand_errors[@]}"; do
				printf "${i}\n"
			done
		fi
		return 1
	else
		if [ $silent == false ]; then
			printf "${c__success}Mandatory parameters OK${nocolor}
			\n"
		fi
		return 0
	fi

}

check_valid_ip_cidr() {
	local input="$1"

	if [ $silent == false ]; then
		printf "${c__fctAction}Checking ${c__value}${input}${nocolor} validity ... ${nocolor}"
	fi

	# Validate IP with CIDR format
	if [[ $input =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$ ]]; then
		# Split the IP and CIDR
		local ip="${input%/*}"
		local cidr="${input#*/}"

		# Validate IP address
		if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
			# Validate CIDR
			if [[ $cidr =~ ^[0-9]+$ ]] && [[ $cidr -ge 0 ]] && [[ $cidr -le 32 ]]; then
				if [ $silent == false ]; then
					printf "${c__success}OK.${nocolor}\n"
				fi
				return 0
			else
				if [ $silent == false ]; then
					printf "${c__error}KO (invalid CIDR).${nocolor}\n"
				fi
				g_errors+=("${c__error}check_valid_ip_cidr - invalid CIDR : ${c__value}${cidr}${nocolor}")
				return 3
			fi
		else
			if [ $silent == false ]; then
				printf "${c__error}KO (Invalid IP).${nocolor}\n"
			fi
			g_errors+=("${c__error}check_valid_ip_cidr - invalid IP : ${c__value}${ip}${nocolor}")
			return 2
		fi
	else
		if [ $silent == false ]; then
			printf "${c__error}KO (Invalid IP or CIDR).${nocolor}\n"
		fi
		g_errors+=("${c__error}check_valid_ip_cidr - invalid IP or CIDR : ${c__value}${input}${nocolor}")
		return 1
	fi
}

CheckIfIPsArrayOK() {
	local ips=("$@")
	local isError=false
	for ip in "${ips[@]}"; do		

		if [ -z "$ip" ]; then
			g_errors+=("Allowed IP is empty")
			continue
		fi

		check_valid_ip_cidr "$ip"
		if [ $? -ne 0 ]; then
			isError=true
			break
		fi
	done

	if [ $isError == true ]; then
		return 1
	else
		return 0
	fi
}

####################
## RULES FUNCTIONS
####################

FindRule() {
	local rule_str=$1

	# List iptables rules and search for the rule
	local checkrule=$(iptables -S | grep -F "$rule_str")

	# Check if the rule is found
	if [[ -n $checkrule ]]; then
		printf " ${c__notice}found.${nocolor}"
		return 1
	else
		printf " ${c__success}not found.${nocolor}"
		return 0
	fi
}

FormatRules() {
	local stringRule=$1
	local ipstring=$2
	local port=$3
	local chain=$4 # INPUT or OUTPUT
	local target=$5 # ACCEPT or DROP

	# local arrays
	local accept=()
	local drop=()

	printf "${c__fctName}${stringRule}${nocolor}\n"


	# check if array is empty
	if [ -z "$ipstring" ]; then
		printf "${c__warning}No IPs provided${c__fctAction}. Skip${nocolor}\n"
		return 2
	fi
	IFS=',' read -r -a ips <<< "${ipstring}"

	if [ -z "$port" ]; then
		printf "${c__warning}No port associated${c__fctAction}. Skip${nocolor}\n"
		return 1
	fi


	if [[ $verbose == true ]]; then
		printf "${c__fct2}IPs: ${nocolor}"
		for ip in "${ips[@]}"; do
			printf "${c__value}${ip} ${nocolor}"
		done
		printf "\n"
	fi


	for ip in "${ips[@]}"; do		

		if [ -z "$ip" ]; then
			g_errors+=("Allowed IP is empty")
			continue
		fi

		check_valid_ip_cidr "$ip"
		if [ $? -ne 0 ]; then
			continue
		fi

		if [ $verbose == true ]; then
			printf "${c__fctAction}Formating rule for ${c__fct2}${ip}${nocolor}\n"
		fi

		local rule="${chain} -s ${ip} -p tcp -m tcp --dport ${port} -j ${target}"

		if [ "$force_insert" = false ]; then
			# check if rule already exists
			printf "${c__fct2}Checking ${c__value2}${target} ${chain}${c__fct2} rule for IP ${c__value}${ip}${c__fct2} on port ${c__value}${port}${c__fct2}  ...${nocolor}"
			FindRule "$rule"
			if [ $? -ne 0 ]; then
				printf " ${c__fctAction}Skip${nocolor}\n"
				g_notices+=("${c__warning}${ip}${c__notice} already has a ${c__warning}${target} ${chain}${c__notice} rule on port ${c__warning}${port}${nocolor}")
				continue
			else
				printf "\n"
			fi
		else
			printf "${c__warning}Force insert rule ${c__notice}(because DROP RULE just added)${nocolor}\n"
		fi

		if [ "$verbose" == true ]; then
			printf "${c__fctAction}Creating rule ${c__fct2}${rule}${nocolor}\n"
		fi
		accept+=("${rule}")
		force_insert=false
	done

	g_output=()

	# add accept rules
	for line in "${accept[@]}"; do
		g_output+=("$line")
	done
	
	# check if array is empty
	if [ ${#g_output[@]} -eq 0 ]; then
		if [ "$verbose" == true ]; then
			printf "${c__warning}No rules to add.${nocolor}\n"
		fi
		return 2
	else
		# show each line of output array
		printf "${c__fct2}Formated rules: ${c__fctName}${#g_output[@]}${nocolor}\n"
		if [ "$silent" == false ]; then
			for line in "${g_output[@]}"; do
				printf "${c__fctAction}${line}${nocolor}\n"
			done
		fi
		return 0
	fi
}

InsertRules() {
	local rules=("$@")
	# check if rules contains rules and show them
	if [ ${#rules[@]} -gt 0 ]; then
		# insert rules
		local ruleCount=0
		local errorOnRule=false
		for rule in "${rules[@]}"; do

			if [ $silent == false ]; then
				printf "${c__fct2}Execute rule ${c__value}${rule}${nocolor} ... "
			fi

			iptables -I $rule > /dev/null 2>&1
			local test=$?
			if [ $test -eq 0 ]; then
				if [ $silent == false ]; then
					printf "${c__success}Done.${nocolor}\n"
				fi
				ruleCount=$((ruleCount+1))
			else
				if [ $silent == false ]; then
					printf "${c__error}Error.${nocolor}\n"
				fi
				g_errors+=("${c__error}Error while adding rule ${c__fct2}${rule}${nocolor}")
				errorOnRule=true
				break
			fi
		done

		if [ $errorOnRule == false ]; then
			printf "${c__fctName}${ruleCount} ${c__success}rules added.${nocolor}\n"
			return 0
		else
			printf "${c__error}Error while adding rules.${nocolor}\n"
			if [ $silent == false ] && [ $ruleCount -gt 0 ]; then
				printf "  ${c__warning}Only ${c__value2}${ruleCount}${c__error} rules added.${nocolor}\n"
			fi

			# with iptables, remove rules that were added before error
			if [ "$cmd_iptables_found" = true ] && [ $ruleCount -gt 0 ]; then
				local l_errors=()
				for (( i=0; i<$ruleCount; i++ )); do
					printf "  ${c__notice}Removing rule ${c__value2}${rules[$i]}${nocolor} ... "

					iptables -D INPUT 1
					local test=$?
					if [ $test -eq 0 ]; then
						printf "${c__success}Done.${nocolor}\n"
					else
						printf "${c__error}Error.${nocolor}\n"
						l_errors+=("${c__error}Error while removing rule ${c__fct2}\"${rules[$i]}\"${nocolor}")
					fi
				done

				if [ ${#l_errors[@]} -gt 0 ]; then
					if [ $silent == false ]; then
						for err in "${l_errors[@]}"; do
							g_errors+=("${i}")
						done
					fi
					return 2
				else
					printf "${c__success}All rules removed.${nocolor}\n"
					return 1
				fi
			elif [ $ruleCount -gt 0 ]; then
				printf "  ${c__notice}You must remove rules manually ${c__warning}(iptables not found)${nocolor}\n"
				return 2
			else
				printf "${c__error}iptables not found${nocolor}\n"
				return 1
			fi


		fi
	else
		if [ $silent == false ]; then
			printf "${c__warning}No rules to add.${nocolor}\n"
		fi
		return 1
	fi
}

######################
## MANAGER FUNCTIONS
######################

ManageDropSSHRule() {
	force_insert=false
	
	printf "🚨 ${c__fctName}Insert DROP ALL rule for SSH on port ${ssh_port}${nocolor}"
		
	IFS=',' read -r -a allwd_ips <<< "${ssh_allowed_ips_str}"

	if [ ${#allwd_ips[@]} -gt 0 ]; then
		printf "\n"
			CheckIfIPsArrayOK "${allwd_ips[@]}"
		local test=$?
		if [ $test -eq 0 ]; then
			local drop=()
			local droprule="INPUT -p tcp -m tcp --dport ${ssh_port} -j DROP"

			printf "${c__fct2}Checking DROP rule ...${nocolor}"

			FindRule "$droprule"
			if [ $? -ne 0 ]; then
				printf " ${c__fctAction}Skip${nocolor}\n"
				g_notices+=("${c__notice}SSH DROP RULE allready exists${nocolor}")
				return 3
			else
				printf " ${c__success}added${nocolor}\n"
				drop+=("${droprule}")
			fi

			if [ ${#drop[@]} -gt 0 ]; then
				printf "\n${c__fctName}Inserting SSH DROP rule${nocolor}\n"
				InsertRules "${drop[@]}"
				local test=$?
				if [ $test -eq 0 ]; then
					force_insert=true
					return 0
				fi
			else
				printf "${c__fctAction}No SSH DROP rule to add${nocolor}\n"
				return 2
			fi
		else
			return 1
		fi
	else
		printf " : ${c__notice}Skip because of no ACCEPT rules${nocolor}\n"
		g_notices+=("${c__notice}DROP rule not apply because of no ACCEPT rules")
		return 2
	fi
}


ManageSSHDenyRules() {
	FormatRules "Format SSH rules for denied ips" "$ssh_denied_ips_str" "$ssh_port" "INPUT" "DROP"
	local result=$?
	if [ $result -eq 1 ]; then
		printf "${c__error}❌ Error while formatting denied SSH rules${nocolor}\n"
		return 1
	elif [ $result -eq 2 ]; then
		return 2
	else
		# get values from g_output array
		ssh_rules_input_drop=("${g_output[@]}")

		if [ ${#ssh_rules_input_drop[@]} -gt 0 ]; then
			printf "\n${c__fctName}Add SSH rules for denied IPs${nocolor}\n"
			InsertRules "${ssh_rules_input_drop[@]}"
		else
			if [ $silent != true ]; then
				printf "${c__fctAction}No SSH rules for denied IPs${nocolor}\n"
			fi
		fi

	fi
}

ManageSSHAllowRules() {
	FormatRules "Format SSH rules for allowed ips" "$ssh_allowed_ips_str" "$ssh_port" "INPUT" "ACCEPT"
	local result=$?
	if [ $result -eq 1 ]; then
		printf "${c__error}❌ Error while formatting allowed SSH rules${nocolor}\n"
		return 1
	elif [ $result -eq 2 ]; then
		return 2
	else
		# get values from g_output array
		ssh_rules_input_accept=("${g_output[@]}")

		if [ ${#ssh_rules_input_accept[@]} -gt 0 ]; then
			printf "\n${c__fctName}Add SSH rules for allowed IPs${nocolor}\n"
			InsertRules "${ssh_rules_input_accept[@]}"
			printf "\n"
		else
			if [ $silent != true ]; then
				printf "${c__fctAction}No SSH rules for allowed IPs${nocolor}\n"
			fi
		fi

	fi
}


ManageICMPRules() {
	local icmp_rule_input="INPUT -p icmp -j ACCEPT"
	local icmp_rule_output="OUTPUT -p icmp -j ACCEPT"

	printf "${c__fctName}Format ICMP rules${nocolor}\n"

	InsertICMPRule "$icmp_rule_input" "INPUT"
	local result=$?
	if [ $result -eq 1 ]; then
		g_errors+=("${c__error}Error while adding ICMP ${c__fct2}INPUT${c__error} rule${nocolor}")
		return 1
	elif [ $result -eq 2 ]; then
		g_notices+=("${c__notice}ICMP ${c__fct2}INPUT${c__notice} rule : rule allready exists${nocolor}")
		# return 2
	fi

	InsertICMPRule "$icmp_rule_output" "OUTPUT"
	result=$?
	if [ $result -eq 1 ]; then
		g_errors+=("${c__error}Error while adding ICMP ${c__fct2}OUTPUT${c__error} rule${nocolor}")
		return 1
	elif [ $result -eq 2 ]; then
		g_notices+=("${c__notice}ICMP ${c__fct2}OUPUT${c__notice} rule : rule allready exists${nocolor}")
		# return 2
	fi
}

InsertICMPRule() {
	local rule="$1"
	local target="$2"

	printf "${c__fct2}Checking ICMP ${target} rule ...${nocolor}"
	FindRule "$rule"
	if [ $? -ne 0 ]; then
		printf " ${c__fctAction}Skip${nocolor}\n"
		return 2
	else
		printf "\n"
	fi


	if [ $silent == false ]; then
		printf "${c__fct2}Execute rule ${c__value}${rule}${nocolor} ... "
	fi

	iptables -I $rule > /dev/null 2>&1
	local test=$?
	if [ $test -eq 0 ]; then
		if [ $silent == false ]; then
			printf "${c__success}Done.${nocolor}\n"
		fi
	else
		if [ $silent == false ]; then
			printf "${c__error}Error.${nocolor}\n"
		fi
		g_errors+=("${c__error}Error while adding rule ${c__fct2}${rule}${nocolor}")
		return 1
	fi
}


######################
## DISPLAY FUNCTIONS
######################

StartText () {
	printf "${blue}$commandName script ${nocolor}\n"
}
HowToUse() {
	printf "❓ ${blue}How to use${gray}\n"
	printf "${whiitebold}This script is used to configure iptables for entire system.${nocolor}\n"

	printf " ${c__notice}🚨 Warning\n"
	printf "   DROP rules are inserts BEFORE ACCEPT rules.${nocolor}\n"

	printf "\n"
	printf "${commandName} -p 22 -s \"192.168.0.1/24,172.0.0.1/24\" -S \"10.10.10.1/24,10.10.72.0/16\" --icmp --drop-ssh --verbose --silent${nocolor}\n"
	printf "\n"
	printf "${whiitebold}Parameters :${gray}\n"
	printf "    -p  --ssh-port   : SSH port\n"
	printf "\n"
	printf "    -s  --ssh-allow : Array of allowed ips to connect throught SSH (CIDR must be present)\n"
	printf "    -S  --ssh-deny  : Array of denied ips to connect throught SSH (CIDR must be present)\n"
	printf "\n"
	printf "    --icmp          : Flag to add ICMP rules\n"
	printf "    --drop-ssh      : Flag to drop all ssh connections\n"
	printf "\n"
	printf "  --verbose         : show logs\n"
	printf "  --silent          : hide logs\n"
	printf "\n"
	printf "  -h  --help        : show this message\n"
	printf "${nocolor}\n"
}

EndOfScript() {
	printf "\n${c__fctName}${commandName}${nocolor} - ${c__fct2}Resume${nocolor}\n"

	# show error messages if there are
	if [[ ${#g_errors[@]} -gt 0 ]]; then
		printf "${c__error}❌ ${#g_errors[@]} error(s)${nocolor}\n"
		for err in "${g_errors[@]}"; do
			printf "  ${c__error}- ${err}${nocolor}\n"
		done
		isScriptInError=true
	else
		if [[ $silent == false ]]; then
			printf "${c__fctAction}✅ No error${nocolor}\n"
		fi
	fi

	# show warning messages if there are
	if [[ ${#g_warnings[@]} -gt 0 ]]; then
		printf "${c__warning}⚠️ ${#g_warnings[@]} warning(s)${nocolor}\n"
		for warn in "${g_warnings[@]}"; do
			printf "  ${c__warning}- ${warn}${nocolor}\n"
		done
	else
		if [[ $silent == false ]]; then
			printf "${c__fctAction}✅ No warning${nocolor}\n"
		fi
	fi

	# show notice messages if there are
	if [[ ${#g_notices[@]} -gt 0 ]]; then
		printf "${c__notice}📢 ${#g_notices[@]} notice(s)${nocolor}\n"
		for notice in "${g_notices[@]}"; do
			printf "  ${c__notice}- ${notice}${nocolor}\n"
		done
	else
		if [[ $silent == false ]]; then
			printf "${c__fctAction}✅ No notice${nocolor}\n"
		fi
	fi

	# show iptables rules
	if [[ $verbose == true ]]; then
		printf "\n${c__fctName}iptables review${nocolor}\n"
		iptables -L -n -v
	fi

	if [[ $silent == false ]]; then
		printf "👋 ${blue}Bye bye${nocolor} 👋\n"
	fi
}

## ------------------------------------------------------------------------------------------------------------------------------------ ##

# Récupération des paramètres en utilisant getopts
while [[ $# -gt 0 ]]; do
	case $1 in
		-p | --ssh-port)
			shift
			ssh_port=$1
			;;
		-s | --ssh-allow)
			shift
			ssh_allowed_ips_str=$1
			;;
		-S | --ssh-deny)
			shift
			ssh_denied_ips_str=$1
			;;
		--icmp)
			active_icmp=true
			#   shift
			;;
		--drop-ssh)
			drop_ssh=true
			#   shift
			;;
		--verbose)
			verbose=true
			# shift
			;;
		--silent)
			silent=true
			# shift
			;;
		-h | --help)
			HowToUse
			exit 0
			;;
		*)
			echo "Option invalide: $1"
			exit 1
			;;
	esac
	shift
done


CheckIfParameters
if [ $? -eq 1 ]; then
	StartText
	HowToUse
	exit 1
fi

CheckIptables
if [ $? -eq 1 ]; then
	exit 1
fi

if [[ "$silent" == false ]]; then
	StartText
fi

CheckMandatoryParams
if [ $? -eq 1 ]; then
	exit 1
fi



if [ "$drop_ssh" = true ]; then
	ManageDropSSHRule
	test=$?
	if [ $test -eq 1 ]; then
		EndOfScript
		exit 1
	fi
fi


if [ ! -z "$ssh_denied_ips_str" ]; then
	ManageSSHDenyRules
fi

if [ ! -z "$ssh_allowed_ips_str" ]; then
	ManageSSHAllowRules
fi


if [ $active_icmp == true ]; then
	ManageICMPRules
fi



EndOfScript
if [[ ${#g_errors[@]} -gt 0 ]]; then
	exit 1
else
	exit 0
fi