#!/bin/bash

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__value2=$purple
c__error=$red
c__warning=$orange
c__notice=$yellow
c__success=$green


###############
## CHECK ROOT
###############
# if [ "$EUID" -ne 0 ]; then
# 	printf "${c__error}Please run this script as root.${nocolor}\n"
# 	exit 1
# fi

###############
## VARIABLES
###############
commandPath=$0
commandName=`basename "$commandPath"`
pwd=$(pwd)
actualpwd=$(pwd)
g_errors=()
isScriptInError=false
g_warnings=()
g_notices=()

src_dir="files_to_copy/etc/fail2ban"
dst_dir="system/etc/fail2ban"

##############
## ARGUMENTS
##############
verbose=false
silent=false



########################
## VALIDATOR FUNCTIONS
########################

CheckCommands() {
	local errors=()
	# if ! command -v fail2ban > /dev/null; then
	# 	errors+=("fail2ban is not installed")
	# fi

	if ! command -v fail2ban-client > /dev/null; then
		errors+=("fail2ban-client is not installed")
	fi

	# check if errors contains errors and show them
	if [ ${#errors[@]} -gt 0 ]; then
		for err in "${errors[@]}"; do
			printf "${c__error}${err}${nocolor}\n"
		done
		return 1
	else
		return 0
	fi
}
CheckIfParameters() {
	return 0
}

CheckMandatoryParams() {
	# check if script has parameters
	if [ $# -eq 0 ]; then
		return 0
	fi

	if [ $silent == false ]; then
		printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	fi

	## Check mandatory parameters
	

	# check if mand_errors contains errors and show them
	if [ ${#mand_errors[@]} -gt 0 ]; then
		if [ $silent == false ]; then
			for i in "${mand_errors[@]}"; do
				printf "${i}\n"
			done
		fi
		return 1
	else
		if [ $silent == false ]; then
			printf "${c__success}Mandatory parameters OK${nocolor}
			\n"
		fi
		return 0
	fi

}

######################
## DISPLAY FUNCTIONS
######################

StartText () {
	printf "${blue}$commandName script ${nocolor}\n"
}
HowToUse() {
	printf "‚ùì ${blue}How to use${gray}\n"
	printf "${whiitebold}This script is used to configure iptables for entire system.${nocolor}\n"

	printf "\n"
	printf "${commandName} --verbose --silent${nocolor}\n"
	printf "\n"
	printf "${whiitebold}Parameters :${gray}\n"
	printf "\n"
	printf "  --verbose         : show logs\n"
	printf "  --silent          : hide logs\n"
	printf "\n"
	printf "  -h  --help        : show this message\n"
	printf "${nocolor}\n"
}

EndOfScript() {
	printf "\n${c__fctName}${commandName}${nocolor} - ${c__fct2}Resume${nocolor}\n"

	# show error messages if there are
	if [[ ${#g_errors[@]} -gt 0 ]]; then
		printf "${c__error}‚ùå ${#g_errors[@]} error(s)${nocolor}\n"
		for err in "${g_errors[@]}"; do
			printf "  ${c__error}- ${err}${nocolor}\n"
		done
		isScriptInError=true
	else
		if [[ $verbose == true ]]; then
			printf "${c__fctAction}‚úÖ No error${nocolor}\n"
		fi
	fi

	# show warning messages if there are
	if [[ ${#g_warnings[@]} -gt 0 ]]; then
		printf "${c__warning}‚ö†Ô∏è ${#g_warnings[@]} warning(s)${nocolor}\n"
		for warn in "${g_warnings[@]}"; do
			printf "  ${c__warning}- ${warn}${nocolor}\n"
		done
	else
		if [[ $verbose == true ]]; then
			printf "${c__fctAction}‚úÖ No warning${nocolor}\n"
		fi
	fi

	# show notice messages if there are
	if [[ ${#g_notices[@]} -gt 0 ]]; then
		printf "${c__notice}üì¢ ${#g_notices[@]} notice(s)${nocolor}\n"
		for notice in "${g_notices[@]}"; do
			printf "  ${c__notice}- ${notice}${nocolor}\n"
		done
	else
		if [[ $verbose == true ]]; then
			printf "${c__fctAction}‚úÖ No notice${nocolor}\n"
		fi
	fi

	if [[ $silent == false ]]; then
		printf "üëã ${blue}Bye bye${nocolor} üëã\n"
	fi
}

##################
## MAIN FUNCTION
##################
Main() {
	if [[ $silent == false ]]; then
		printf "${c__fctName}Manage file${nocolor}\n"
	fi

	traverse_files "$src_dir" "$dst_dir"
	local test=$?
	if [[ $test -ne 0 ]]; then
		return 1
	fi
	return 0
}

###################
## FILE FUNCTIONS
###################
save_file() {
    local source_file="$1"
    local destination_file="$source_file.bak"

	echo "source_file : $source_file"
	echo "destination_file : $destination_file"

	# check if source file exists
	if [ ! -f "$source_file" ]; then
		return 1
	fi

	# check if destination file does not exists
	if [ -f "$destination_file" ]; then
		g_notices+=("${c__notice}SAVE - Destination file ${c__fct2}$(basename -- $destination_file) ${c__notice}already exists${nocolor}")
		return 2
	fi

    printf "${c__value2}Saving $(PrintFilePath $destination_file) ...${nocolor}"
    mv "$source_file" "$destination_file"
	local test=$?

    # Check save
    if [ $test -eq 0 ]; then
        printf " ${c__success}OK${nocolor}\n"
		return 0
    else
        printf "${c__error}KO${nocolor}\n"
		g_errors+=("${c__error}SAVE - Error when saving $source_file${nocolor}")
		return 1
    fi
}
copy_file() {
    local source_file="$1"
    local destination_dir="$2"

	# check if source file exists
	if [ ! -f "$source_file" ]; then
		printf "${c__error}COPY - Source file ${c__fct2}$(basename -- $source_file) ${c__error}does not exist"
		g_errors+=("${c__error}COPY - Source file ${c__fct2}$(basename -- $source_file) ${c__error}does not exist")
		return 1
	fi

	# check if destination dir exists
	if [ ! -d "$destination_dir" ]; then
		printf "${c__error}COPY - Destination dir ${c__fct2}$(basename $destination_dir) ${c__error}does not exist"
		g_errors+=("${c__error}COPY - Destination dir ${c__fct2}$(basename $destination_dir) ${c__error}does not exist")
		return 1
	else
		# get basename of source file
		local source_basename=$(basename "$source_file")
		local destination_file="$destination_dir/$source_basename"
		save_file "$destination_file"
		local test=$?
		if [[ $test -eq 1 ]]; then
			return 1
		elif [[ $test -eq 2 ]]; then
			printf "${c__warning}saved file ${c__fct2}$(basename $destination_file).bak${c__warning} already exists${nocolor}\n"
			# return 2
		fi
	fi

    printf "${c__value}Copying ${c__fct2}$(PrintFilePath $source_file)${c__fctAction} ...${nocolor}"
    cp "$source_file" "$destination_dir"
	local test=$?

    # Check copy
    if [ $test -eq 0 ]; then
        printf " ${c__success}OK${nocolor}\n"
		return 0
    else
        printf "${c__error}KO${nocolor}\n"
		g_errors+=("${c__error}COPY - Error when copying ${c__fct2}$(PrintFilePath $source_file)${c__error} to ${c__fct2}$(PrintFilePath $destination_dir)${nocolor}")
		return 1
    fi
}

traverse_files() {
    local source_dir="$1"
    local destination_dir="$2"

	# check if source directory exists
	if [ ! -d "$source_dir" ]; then
		g_errors+=("${c__error}SCAN - Source directory $(PrintFilePath $source_dir) does not exist${nocolor}")
		return 1
	fi

	if [[ ! -d "$destination_dir" ]]; then
		g_errors+=("${c__error}SCAN - Destination directory $(PrintFilePath $destination_dir) does not exist${nocolor}")
		return 1
	fi


	local isErrors=false

    for file in "$source_dir"/*; do
        if [ -f "$file" ]; then
			printf "${c__fctAction}Processing ${c__fct2}$(basename "$file")${nocolor}\n"

			copy_file "$file" "$destination_dir"
			local test=$?
			if [[ $test -eq 1 ]]; then
				g_errors+=("${c__error}SCAN - Error when copying $(PrintFilePath $file) ${c__error}to $(PrintFilePath $destination_dir)")
				isErrors=true
			fi
		elif [ -d "$file" ]; then
			# get basename of file
			local basename=$(basename "$file")
			traverse_files "$file" "${destination_dir}/$basename"
		else
			g_warnings+=("${c__error}SCAN - Unknown file type for ${c__fct2}$file${nocolor}")
			isErrors=true
			break
		fi
    done

	if [[ $isErrors == true ]]; then
		return 1
	else
		return 0
	fi
}

PrintFilePath() {
	printf "${c__fctAction}$(dirname "$1")/${c__fct2}$(basename "$1")${nocolor}"
}

## ------------------------------------------------------------------------------------------------------------------------------------ ##

# R√©cup√©ration des param√®tres en utilisant getopts
while [[ $# -gt 0 ]]; do
	case $1 in
		--verbose)
			verbose=true
			# shift
			;;
		--silent)
			silent=true
			# shift
			;;
		-h | --help)
			HowToUse
			exit 0
			;;
		*)
			echo "Option invalide: $1"
			exit 1
			;;
	esac
	shift
done


CheckIfParameters
if [ $? -eq 1 ]; then
	StartText
	HowToUse
	exit 1
fi

CheckCommands
if [ $? -eq 1 ]; then
	exit 1
fi

if [[ "$silent" == false ]]; then
	StartText
fi

CheckMandatoryParams
if [ $? -eq 1 ]; then
	exit 1
fi



Main



EndOfScript
if [[ ${#g_errors[@]} -gt 0 ]]; then
	exit 1
else
	exit 0
fi