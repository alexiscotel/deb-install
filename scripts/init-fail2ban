#!/bin/bash

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__value2=$purple
c__error=$red
c__warning=$orange
c__notice=$yellow
c__success=$green


###############
## VARIABLES
###############
commandPath=$0
commandName=`basename "$commandPath"`
pwd=$(pwd)
actualpwd=$(pwd)
g_errors=()
isScriptInError=false
g_warnings=()
g_notices=()

src_dir="files_to_copy/etc/fail2ban"
dst_dir="/etc/fail2ban"


##############
## ARGUMENTS
##############
verbose=false
silent=false
# dst_dir=""


###############
## CHECK ROOT
###############
# if [ "$EUID" -ne 0 ]; then
# 	printf "${c__error}Please run this script as root.${nocolor}\n"
# 	exit 1
# fi


########################
## VALIDATOR FUNCTIONS
########################

CheckCommands() {
	local errors=()
	# if ! command -v fail2ban > /dev/null; then
	# 	errors+=("fail2ban is not installed")
	# fi

	if ! command -v apt-get > /dev/null; then
		printf "${c__error}apt-get is not installed${nocolor}\n"
		return 1
	fi

	if ! command -v fail2ban-client > /dev/null; then
		printf "${c__error}fail2ban-client is not installed${nocolor}\n"
		return 2
	fi

	return 0

	# check if errors contains errors and show them
	# if [ ${#errors[@]} -gt 0 ]; then
	# 	for err in "${errors[@]}"; do
	# 		printf "${c__error}${err}${nocolor}\n"
	# 	done
	# 	return 1
	# else
	# 	return 0
	# fi
}
CheckIfParameters() {
	if [ -z "$dst_dir" ]; then
		return 1
	else
		return 0
	fi
}

CheckMandatoryParams() {
	# check if script has parameters
	# if [ $# -eq 0 ]; then
	# 	return 0
	# fi

	if [ $verbose == true ]; then
		printf "${c__fctName}Checking mandatory parameters ...${nocolor}\n"
	fi

	## Check mandatory parameters

	# check file parameter
	# if [ $verbose == true ] && [ $silent == false ]; then
	# 	printf "${c__fctAction}Checking for file parameter ...${nocolor}\n"
	# fi
	# echo "dst_dir : $dst_dir"
	# if [[ -z $dst_dir ]]; then
	# 	printf "${c__error}parameter ${c__msgVar}-d | --dst-dir${c__error} is mandatory.${nocolor}\n"
	# 	mand_errors+=("file is mandatory")
	# else
	# 	if [ $verbose == true ] && [ $silent == false ]; then
	# 		printf "    ${c__fct2}file : ${c__value}${dst_dir}${nocolor}\n"
	# 	fi
	# fi
	

	# check if mand_errors contains errors and show them
	if [ ${#mand_errors[@]} -gt 0 ]; then
		if [ $silent == false ]; then
			for i in "${mand_errors[@]}"; do
				printf "${i}\n"
			done
		fi
		return 1
	else
		if [ $verbose == true ]; then
			printf "${c__success}Mandatory parameters OK${nocolor}
			\n"
		fi
		return 0
	fi

}

######################
## DISPLAY FUNCTIONS
######################

StartText () {
	printf "${blue}$commandName script ${nocolor}\n"
}
HowToUse() {
	printf "‚ùì ${blue}How to use${gray}\n"
	printf "${whiitebold}This script is used to configure iptables for entire system.${nocolor}\n"
	printf "\n"
	printf "${commandName} --verbose --silent${nocolor}\n"
	printf "\n"
	printf "${whiitebold}Parameters :${gray}\n"
	printf "\n"
	printf "  --verbose         : show logs\n"
	printf "  --silent          : hide logs\n"
	printf "\n"
	printf "  -h  --help        : show this message\n"
	printf "${nocolor}\n"
}

EndOfScript() {
	if [[ $silent == true ]]; then
		return 0
	fi

	printf "\n${c__fctName}${commandName}${nocolor} - ${c__fct2}Resume${nocolor}\n"

	# show error messages if there are
	if [[ ${#g_errors[@]} -gt 0 ]]; then
		printf "${c__error}‚ùå ${#g_errors[@]} error(s)${nocolor}\n"
		for err in "${g_errors[@]}"; do
			printf "  ${c__error}- ${err}${nocolor}\n"
		done
		isScriptInError=true
	else
		if [[ $verbose == true ]]; then
			printf "${c__fctAction}‚úÖ No error${nocolor}\n"
		fi
	fi

	# show warning messages if there are
	if [[ ${#g_warnings[@]} -gt 0 ]]; then
		printf "${c__warning}‚ö†Ô∏è ${#g_warnings[@]} warning(s)${nocolor}\n"
		for warn in "${g_warnings[@]}"; do
			printf "  ${c__warning}- ${warn}${nocolor}\n"
		done
	else
		if [[ $verbose == true ]]; then
			printf "${c__fctAction}‚úÖ No warning${nocolor}\n"
		fi
	fi

	# show notice messages if there are
	if [[ ${#g_notices[@]} -gt 0 ]]; then
		printf "${c__notice}üì¢ ${#g_notices[@]} notice(s)${nocolor}\n"
		for notice in "${g_notices[@]}"; do
			printf "  ${c__notice}- ${notice}${nocolor}\n"
		done
	else
		if [[ $verbose == true ]]; then
			printf "${c__fctAction}‚úÖ No notice${nocolor}\n"
		fi
	fi
}

PrintFilePath() {
	printf "${c__fctAction}$(dirname "$1")/${c__fct2}$(basename "$1")${nocolor}"
}

#####################
## INSTALL FUNCTION
#####################
InstallFail2ban() {
	# check if fail2ban is installed
	printf "${c__fctName}Installing fail2ban${nocolor}\n"
	if ! command -v fail2ban > /dev/null; then
		apt-get install fail2ban -y
		local test=$?
		if [[ $test -ne 0 ]]; then
			printf "${c__error}‚ùå fail2ban installation failed${nocolor}\n"
			return 1
		else
			printf "${c__fctAction}‚úÖ fail2ban installed${nocolor}\n"
			return 0
		fi
	else
		printf "${c__notice}‚úÖ fail2ban already installed${nocolor}\n"
		g_notices+=("fail2ban already installed")
		return 0
	fi
}


##################
## MAIN FUNCTION
##################
Main() {
	if [[ $silent == false ]]; then
		printf "${c__fctName}Manage file${nocolor}\n"
	fi

	browse_and_copy "$src_dir" "$dst_dir"
	local test=$?
	if [[ $test -ne 0 ]]; then
		return 1
	fi
	return 0
}

###################
## FILE FUNCTIONS
###################
# create a function that browse all files in src_dir directory and subdirectories
# if file exists in dst_dir, create a backup of dst_dir file and copy src_dir file to dst_dir
# if file does not exists in dst_dir, copy src_dir file to dst_dir
function browse_and_copy() {
	local src_dir="$1"
	local dst_dir="$2"

	# Iterate over files and directories in the source directory
	for file in "$src_dir"/*; do
		if [ -f "$file" ]; then  # If the item is a file
			local file_name=$(basename "$file")
			local dst_file="$dst_dir/$file_name"
			
			printf "${c__fctAction}Managing ${c__fct2}$file_name${nocolor}\n"


			if [ -f "$dst_file" ]; then  # If the file exists in the destination directory
			    # Create a backup of the destination file
			    local backup_file="$dst_file.bak"

				# check if backup_file exists
				if [ -f "$backup_file" ]; then
					if [[ $verbose == true ]]; then
						printf "${c__notice}Backup file ${c__fct2}$file_name.bak ${c__notice}already exists${c__fct2}. Skip backup${nocolor}\n"
					fi
					# continue
					# create a backup file with a timestamp
					local s_backup_file=$backup_file
					local timestamp=$(date +%s)
					backup_file="$dst_file.$timestamp.bak"

					g_notices+=("${c__notice}Backup file ${c__fct2}$s_backup_file ${c__notice}already exists.\n${c__fct2}New name : ${c__value}$file_name.$timestamp.bak${nocolor}")
				fi

				printf "${c__warning}"
			    cp "$dst_file" "$backup_file"
				local test_save=$?
				printf "${nocolor}"
				if [[ $test_save -ne 0 ]]; then
					if [[ $verbose == true ]]; then
						printf "${c__error}Error when saving ${c__fct2}$(basename $backup_file)${c__fct2}${nocolor}\n"
					fi
					g_errors+=("${c__error}Error when saving ${c__fct2}$(basename $backup_file)${nocolor}")
					continue
				else
			    	printf "${c__success}Backup OK : ${c__value}$(PrintFilePath $backup_file)${nocolor}\n"
				fi

			    # Copy the source file to the destination directory
				printf "${c__warning}"
			    cp "$file" "$dst_dir"
				local test_copy=$?
				printf "${nocolor}"
				if [[ $test_copy -ne 0 ]]; then
					if [[ $verbose == true ]]; then
						printf "${c__error}Error when copying ${c__fct2}$file_name${c__fctAction}. Skip${nocolor}\n"
					fi
					g_errors+=("${c__error}Error when copying ${c__fct2}$file_name${c__fctAction}. Skip${nocolor}")
					continue
				else
			    	printf "${c__success}copy OK : ${c__value}$file_name ${c__fct2}to ${c__value2}$dst_dir${nocolor}\n"
				fi
			else  # If the file doesn't exist in the destination directory
			    # Copy the source file to the destination directory
				printf "${c__warning}"
			    cp "$file" "$dst_dir"
				local test_copy=$?
				printf "${nocolor}"
				if [[ $test_copy -ne 0 ]]; then
					if [[ $verbose == true ]]; then
						printf "${c__error}Error when copying ${c__fct2}$file_name${c__fctAction}. Skip${nocolor}\n"
					fi
					g_errors+=("${c__error}Error when copying ${c__fct2}$file_name${c__fctAction}. Skip${nocolor}")
					continue
				else
					printf "${c__success}copy OK : ${c__value}$file_name ${c__fct2}to ${c__value2}$dst_dir${nocolor}\n"
				fi
			fi
			
		elif [ -d "$file" ]; then  # If the item is a directory
			local sub_src_dir="$file"
			local sub_dst_dir="$dst_dir/$(basename "$file")"

			# Recursively call the function to browse the subdirectory
			browse_and_copy "$sub_src_dir" "$sub_dst_dir"
		fi
	done
}


## ------------------------------------------------------------------------------------------------------------------------------------ ##

# R√©cup√©ration des param√®tres en utilisant getopts
while [[ $# -gt 0 ]]; do
	case $1 in
		--verbose)
			verbose=true
			# shift
			;;
		--silent)
			silent=true
			# shift
			;;
		-h | --help)
			HowToUse
			exit 0
			;;
		*)
			echo "Option invalide: $1"
			exit 1
			;;
	esac
	shift
done


CheckIfParameters
if [ $? -eq 1 ]; then
	StartText
	HowToUse
	exit 1
fi

if [[ "$silent" == false ]]; then
	StartText
fi

CheckMandatoryParams
if [ $? -eq 1 ]; then
	exit 1
fi

CheckCommands
test=$?
if [ $test -eq 1 ]; then
	exit 1
elif [ $test -eq 2 ]; then
	InstallFail2ban
	test2=$?
	if [[ $test2 -ne 0 ]]; then
		exit 1
	fi
fi


Main


EndOfScript
if [ ${#g_errors[@]} -gt 0 ] || [ ${#g_warnings[@]} -gt 0 ]; then
	exit 1
else
	if [[ $silent == false ]]; then
		printf "üëã ${blue}Bye bye${nocolor} üëã\n"
	fi
	exit 0
fi